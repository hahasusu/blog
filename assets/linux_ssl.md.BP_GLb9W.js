import{_ as a,c as s,o as e,a4 as n}from"./chunks/framework.GYzjcnJh.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"linux/ssl.md","filePath":"linux/ssl.md"}'),l={name:"linux/ssl.md"},o=n(`<blockquote><p>SSL 证书是一个数字证书，用于认证网站的身份并启用加密连接。<br> SSL 代表安全套接字层，这是一个安全协议，可在Web 服务器和Web 浏览器之间创建加密链接。 公司和组织需要在其网站上添加SSL 证书，以保护在线交易并保持客户信息的私密性和安全性。</p></blockquote><p><strong>证书扩展名:</strong></p><ul><li>.pem - Privacy Enhanced Mail，一种证书文件格式，可以包含证书（如公钥证书）、CA证书和私钥。它以文本形式存储，可以包含一个或多个项目，项目之间用“-----BEGIN CERTIFICATE-----”和“-----END CERTIFICATE-----”标记分隔。</li><li>.cer 或 .crt - 证书文件，通常是DER（二进制格式）或PEM（Base64编码）格式。这些文件包含公钥证书，并且可以由各种程序识别。</li><li>.der - 另一种二进制形式的证书文件，不包含文本信息，主要用于Java平台。</li><li>.pfx 或 .p12 - PKCS#12格式，它可以将服务器证书、中间CA证书、根证书以及私钥存储在一个加密文件中，常用于Windows和Java平台。</li><li>.csr - 证书签名请求（Certificate Signing Request），包含公钥和标识证书所有者的信息，用于向证书颁发机构（CA）申请证书。</li></ul><p><strong>密钥扩展名:</strong></p><ul><li>.key - 私钥文件，通常是PEM格式。用于证书的解密、签名等操作，必须保密。</li><li>.pub - 公钥文件，与私钥成对出现，用于加密信息或验证签名。</li></ul><h2 id="阿里云证书" tabindex="-1">阿里云证书 <a class="header-anchor" href="#阿里云证书" aria-label="Permalink to &quot;阿里云证书&quot;">​</a></h2><p><a href="https://help.aliyun.com/zh/ssl-certificate/getting-started/get-started-with-free-certificates?spm=a2c4g.11186623.0.0.48ee2461UthqGg" target="_blank" rel="noreferrer">使用说明</a></p><h2 id="acme-sh-工具" tabindex="-1">acme.sh 工具 <a class="header-anchor" href="#acme-sh-工具" aria-label="Permalink to &quot;acme.sh 工具&quot;">​</a></h2><blockquote><p>acme.sh 实现了 acme 协议, 可以从 letsencrypt 生成免费的证书.</p></blockquote><blockquote><p>说明 <a href="https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E" target="_blank" rel="noreferrer">https://github.com/acmesh-official/acme.sh/wiki/说明</a></p></blockquote><h3 id="_1-安装-curl-https-get-acme-sh-sh-s-email-my-example-com" tabindex="-1">1. <strong>安装</strong>: <code>curl https://get.acme.sh | sh -s email=my@example.com</code> <a class="header-anchor" href="#_1-安装-curl-https-get-acme-sh-sh-s-email-my-example-com" aria-label="Permalink to &quot;1. **安装**: \`curl https://get.acme.sh | sh -s email=my@example.com\`&quot;">​</a></h3><h3 id="_2-生成证书" tabindex="-1">2. <strong>生成证书</strong> <a class="header-anchor" href="#_2-生成证书" aria-label="Permalink to &quot;2. **生成证书**&quot;">​</a></h3><pre><code>acme.sh 实现了 acme 协议支持的所有验证协议. 一般有两种方式验证: **http** 和 **dns** 验证
</code></pre><h3 id="手动-dns-方式" tabindex="-1">手动 dns 方式 <a class="header-anchor" href="#手动-dns-方式" aria-label="Permalink to &quot;手动 dns 方式&quot;">​</a></h3><blockquote><p>手动在域名上添加一条 txt 解析记录, 验证域名所有权.<br> 好处是, 你不需要任何服务器, 不需要任何公网 ip, 只需要 dns 的解析记录即可完成验证</p></blockquote><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#E2931D;">acme.sh</span><span style="color:#91B859;"> --issue</span><span style="color:#91B859;"> --dns</span><span style="color:#91B859;"> -d</span><span style="color:#91B859;"> mydomain.com</span><span style="color:#91B859;"> --yes-I-know-dns-manual-mode-enough-go-ahead-please</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后, acme.sh 会生成相应的解析记录显示出来, 你只需要在你的域名管理面板中添加这条 txt 记录即可.</p><p>等待解析完成之后, 重新生成证书</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#E2931D;">acme.sh</span><span style="color:#91B859;"> --renew</span><span style="color:#91B859;"> -d</span><span style="color:#91B859;"> mydomain.com</span><span style="color:#91B859;"> --yes-I-know-dns-manual-mode-enough-go-ahead-please</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>dns 方式的真正强大之处在于可以使用域名解析商提供的 api 自动添加 txt 记录完成验证.</strong><br> 以 dnspod 为例, 你需要先登录到 dnspod 账号, 生成你的 api id 和 api key, 都是免费的. 然后</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">export</span><span style="color:#90A4AE;"> DP_Id</span><span style="color:#39ADB5;">=</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">1234</span><span style="color:#39ADB5;">&quot;</span></span>
<span class="line"><span style="color:#9C3EDA;">export</span><span style="color:#90A4AE;"> DP_Key</span><span style="color:#39ADB5;">=</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">sADDsdasdgdsf</span><span style="color:#39ADB5;">&quot;</span></span>
<span class="line"><span style="color:#E2931D;">acme.sh</span><span style="color:#91B859;"> --issue</span><span style="color:#91B859;"> --dns</span><span style="color:#91B859;"> dns_dp</span><span style="color:#91B859;"> -d</span><span style="color:#91B859;"> aa.com</span><span style="color:#91B859;"> -d</span><span style="color:#91B859;"> www.aa.com</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9C3EDA;">export</span><span style="color:#90A4AE;"> Ali_Key</span><span style="color:#39ADB5;">=</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">&lt;key&gt;</span><span style="color:#39ADB5;">&quot;</span></span>
<span class="line"><span style="color:#9C3EDA;">export</span><span style="color:#90A4AE;"> Ali_Secret</span><span style="color:#39ADB5;">=</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">&lt;secret&gt;</span><span style="color:#39ADB5;">&quot;</span></span>
<span class="line"><span style="color:#E2931D;">acme.sh</span><span style="color:#91B859;"> --issue</span><span style="color:#91B859;"> --dns</span><span style="color:#91B859;"> dns_ali</span><span style="color:#91B859;"> -d</span><span style="color:#91B859;"> example.com</span><span style="color:#91B859;"> -d</span><span style="color:#90A4AE;"> *</span><span style="color:#91B859;">.example.com</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;"># The Ali_Key and Ali_Secret will be saved in ~/.acme.sh/account.conf and will be reused when needed.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>证书就会自动生成了. 这里给出的 api id 和 api key 会被自动记录下来, 将来你在使用 dnspod api 的时候, 就不需要再次指定了. 直接生成就好了:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#E2931D;">acme.sh</span><span style="color:#91B859;"> --issue</span><span style="color:#91B859;"> -d</span><span style="color:#91B859;"> mydomain2.com</span><span style="color:#91B859;"> --dns</span><span style="color:#91B859;">  dns_dp</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>DNS api 说明</strong> : <a href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi" target="_blank" rel="noreferrer">https://github.com/acmesh-official/acme.sh/wiki/dnsapi</a>/</p><h3 id="_3-安装证书" tabindex="-1">3. 安装证书 <a class="header-anchor" href="#_3-安装证书" aria-label="Permalink to &quot;3. 安装证书&quot;">​</a></h3><p>默认生成的证书都放在安装目录下: ~/.acme.sh/</p><h3 id="_4-查询证书信息" tabindex="-1">4. 查询证书信息 <a class="header-anchor" href="#_4-查询证书信息" aria-label="Permalink to &quot;4. 查询证书信息&quot;">​</a></h3><p><code>acme.sh --info -d example.com</code></p><h2 id="lego-获取证书" tabindex="-1">lego 获取证书 <a class="header-anchor" href="#lego-获取证书" aria-label="Permalink to &quot;lego 获取证书&quot;">​</a></h2><p><a href="https://github.com/go-acme/lego" target="_blank" rel="noreferrer">https://github.com/go-acme/lego</a></p><h2 id="基本思想" tabindex="-1">基本思想 <a class="header-anchor" href="#基本思想" aria-label="Permalink to &quot;基本思想&quot;">​</a></h2><ol><li>先创建根证书CA 再由根证书去签发其他子证书， 如 签发服务端证书，客户端证书</li><li>根证书这一侧， 需要配置策略文件，也就是给其他证书签发时，使用的配置策略</li><li>申请证书这一侧，需求提前准备一份身份说明，如国家，州，区，系统，等信息</li></ol><p>整个过程，有点类似于你去办理身份证的过程，CA 就是公安局，证书就是你的身份证</p><h2 id="数字签名" tabindex="-1">数字签名 <a class="header-anchor" href="#数字签名" aria-label="Permalink to &quot;数字签名&quot;">​</a></h2><p>数字签名就是&quot;非对称加密+摘要算法&quot;，其目的不是为了加密，而是用来防止他人篡改数据。</p><p>其核心思想是：比如A要给B发送数据，A先用摘要算法得到数据的指纹，然后用A的私钥加密指纹，加密后的指纹就是A的签名，B收到数据和A的签名后，也用同样的摘要算法计算指纹，然后用A公开的公钥解密签名，比较两个指纹，如果相同，说明数据没有被篡改，确实是A发过来的数据。假设C想改A发给B的数据来欺骗B，因为篡改数据后指纹会变，要想跟A的签名里面的指纹一致，就得改签名，但由于没有A的私钥，所以改不了，如果C用自己的私钥生成一个新的签名，B收到数据后用A的公钥根本就解不开。</p><p>常用的摘要算法有MD5、SHA1、SHA256。</p><p>使用私钥对需要传输的文本的摘要进行加密，得到的密文即被称为该次传输过程的签名。</p><h2 id="证书签名请求csr" tabindex="-1">证书签名请求CSR <a class="header-anchor" href="#证书签名请求csr" aria-label="Permalink to &quot;证书签名请求CSR&quot;">​</a></h2><p><strong>CSR(Certificate Signing Request)，</strong></p><p>是向CA机构申请数字×××书时使用的请求文件。在生成请求文件前，我们需要准备一对对称密钥。私钥信息自己保存，请求中会附上公钥信息以及国家，城市，域名，Email等信息，CSR中还会附上签名信息。当我们准备好CSR文件后就可以提交给CA机构，等待他们给我们签名，签好名后我们会收到crt文件，即证书。</p><p><strong>注意：</strong> CSR并不是证书。而是向权威证书颁发机构获得签名证书的申请。</p><p>把CSR交给权威证书颁发机构,权威证书颁发机构对此进行签名,完成。保留好CSR,当权威证书颁发机构颁发的证书过期的时候,你还可以用同样的CSR来申请新的证书,key保持不变.</p><p>公钥基础设施(PKI)</p><p>CA(Certification Authority)证书 指的是权威机构给我们颁发的证书。</p>`,45),p=[o];function t(r,c,i,d,h,m){return e(),s("div",null,p)}const y=a(l,[["render",t]]);export{b as __pageData,y as default};

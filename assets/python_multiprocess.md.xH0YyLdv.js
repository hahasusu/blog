import{_ as s,c as a,o as n,a4 as l}from"./chunks/framework.GYzjcnJh.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"python/multiprocess.md","filePath":"backend/python/multiprocess.md"}'),e={name:"python/multiprocess.md"},o=l(`<blockquote><p>multiprocessing 是一个支持使用与 threading 模块类似的 API 来产生进程的包。<br> multiprocessing 包同时提供了本地和远程并发操作，通过使用子进程而非线程有效地绕过了 全局解释器锁。<br> 因此，multiprocessing 模块允许程序员充分利用给定机器上的多个处理器。 它在 POSIX 和 Windows 上均可运行。</p></blockquote><h2 id="process-类" tabindex="-1">Process 类 <a class="header-anchor" href="#process-类" aria-label="Permalink to &quot;Process 类&quot;">​</a></h2><blockquote><p>在 multiprocessing 中，通过创建一个 Process 对象然后调用它的 start() 方法来生成进程。</p></blockquote><p><strong>一个简单的多进程程序示例</strong>:</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#39ADB5;font-style:italic;">from</span><span style="color:#90A4AE;"> multiprocessing </span><span style="color:#39ADB5;font-style:italic;">import</span><span style="color:#90A4AE;"> Process</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9C3EDA;">def</span><span style="color:#6182B8;"> f</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;font-style:italic;">name</span><span style="color:#39ADB5;">):</span></span>
<span class="line"><span style="color:#6182B8;">    print</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&#39;</span><span style="color:#91B859;">hello</span><span style="color:#39ADB5;">&#39;</span><span style="color:#39ADB5;">,</span><span style="color:#6182B8;"> name</span><span style="color:#39ADB5;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#39ADB5;font-style:italic;">if</span><span style="color:#90A4AE;"> __name__ </span><span style="color:#39ADB5;">==</span><span style="color:#39ADB5;"> &#39;</span><span style="color:#91B859;">__main__</span><span style="color:#39ADB5;">&#39;</span><span style="color:#39ADB5;">:</span></span>
<span class="line"><span style="color:#90A4AE;">    p </span><span style="color:#39ADB5;">=</span><span style="color:#6182B8;"> Process</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;font-style:italic;">target</span><span style="color:#39ADB5;">=</span><span style="color:#6182B8;">f</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;font-style:italic;"> args</span><span style="color:#39ADB5;">=(</span><span style="color:#39ADB5;">&#39;</span><span style="color:#91B859;">bob</span><span style="color:#39ADB5;">&#39;</span><span style="color:#39ADB5;">,))</span></span>
<span class="line"><span style="color:#90A4AE;">    p</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">start</span><span style="color:#39ADB5;">()</span></span>
<span class="line"><span style="color:#90A4AE;">    p</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">join</span><span style="color:#39ADB5;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><code>if __name__ == &#39;__main__&#39;</code> 部分是必需</p></div><h3 id="api参考" tabindex="-1">API参考 <a class="header-anchor" href="#api参考" aria-label="Permalink to &quot;API参考&quot;">​</a></h3><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">class</span><span style="color:#90A4AE;"> multiprocessing</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">Process</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;font-style:italic;">group</span><span style="color:#39ADB5;">=None,</span><span style="color:#90A4AE;font-style:italic;"> target</span><span style="color:#39ADB5;">=None,</span><span style="color:#90A4AE;font-style:italic;"> name</span><span style="color:#39ADB5;">=None,</span><span style="color:#90A4AE;font-style:italic;"> args</span><span style="color:#39ADB5;">=(),</span><span style="color:#90A4AE;font-style:italic;"> kwargs</span><span style="color:#39ADB5;">={},</span><span style="color:#39ADB5;"> *,</span><span style="color:#90A4AE;font-style:italic;"> daemon</span><span style="color:#39ADB5;">=None)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="进程池" tabindex="-1">进程池 <a class="header-anchor" href="#进程池" aria-label="Permalink to &quot;进程池&quot;">​</a></h2><h3 id="apply-同步" tabindex="-1">apply 同步 <a class="header-anchor" href="#apply-同步" aria-label="Permalink to &quot;apply 同步&quot;">​</a></h3><blockquote><p>\`apply(func[, args[, kwds]]) 使用 args 参数以及 kwds 命名参数调用 func , 它会在返回结果前阻塞</p></blockquote><h3 id="apply-async-异步" tabindex="-1">apply_async 异步 <a class="header-anchor" href="#apply-async-异步" aria-label="Permalink to &quot;apply_async 异步&quot;">​</a></h3><blockquote><p>apply_async(func[, args[, kwds[, callback[, error_callback]]]]) apply() 方法的一个变种，返回一个 AsyncResult 对象。</p></blockquote><h3 id="map" tabindex="-1">map <a class="header-anchor" href="#map" aria-label="Permalink to &quot;map&quot;">​</a></h3><blockquote><p>map(func, iterable[, chunksize])¶</p></blockquote><h3 id="map-async" tabindex="-1">map_async <a class="header-anchor" href="#map-async" aria-label="Permalink to &quot;map_async&quot;">​</a></h3><blockquote><p>map_async(func, iterable[, chunksize[, callback[, error_callback]]]) map() 方法的一个变种，返回一个 AsyncResult 对象</p></blockquote><h3 id="close" tabindex="-1">close() <a class="header-anchor" href="#close" aria-label="Permalink to &quot;close()&quot;">​</a></h3><p>阻止后续任务提交到进程池，当所有任务执行完成后，工作进程会退出。</p><h3 id="terminate" tabindex="-1">terminate() <a class="header-anchor" href="#terminate" aria-label="Permalink to &quot;terminate()&quot;">​</a></h3><p>不必等待未完成的任务，立即停止工作进程。当进程池对象被垃圾回收时，会立即调用 terminate()。</p><h3 id="join-¶" tabindex="-1">join()¶ <a class="header-anchor" href="#join-¶" aria-label="Permalink to &quot;join()¶&quot;">​</a></h3><p>等待工作进程结束。调用 join() 前必须先调用 close() 或者 terminate() 。</p>`,23),p=[o];function t(c,r,i,y,u,d){return n(),a("div",null,p)}const b=s(e,[["render",t]]);export{A as __pageData,b as default};

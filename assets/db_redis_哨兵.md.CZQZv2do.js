import{_ as s,c as n,o as a,a4 as l}from"./chunks/framework.GYzjcnJh.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"db/redis/哨兵.md","filePath":"backend/db/redis/哨兵.md"}'),e={name:"db/redis/哨兵.md"},p=l(`<p>主从架构和MySQL的主从复制一样,无法实现master和slave角色的自动切换，即当master出现故障时, 不能实现自动的将一个slave 节点提升为新的master节点,即主从复制无法实现自动的故障转移功能,如果 想实现转移,则需要手动修改配置,才能将 slave 服务器提升新的master节点.此外只有一个主节点支持写 操作,所以业务量很大时会导致Redis服务性能达到瓶颈</p><p><strong>需要解决的主从复制的存在以下弊端：</strong></p><ul><li>master和slave角色的自动切换，且不能影响业务</li><li>提升Redis服务整体性能，支持更高并发访问</li></ul><h2 id="sentinel中的三个定时任务" tabindex="-1">Sentinel中的三个定时任务 <a class="header-anchor" href="#sentinel中的三个定时任务" aria-label="Permalink to &quot;Sentinel中的三个定时任务&quot;">​</a></h2><ul><li>每10 秒每个sentinel 对master和slave执行info 发现slave节点 确认主从关系</li><li>每2秒每个sentinel通过master节点的channel交换信息(pub/sub) 通过sentinel__:hello频道交互 交互对节点的“看法”和自身信息</li><li>每1秒每个sentinel对其他sentinel和redis执行ping</li></ul><p>哨兵的前提是已经实现了<code>Redis</code>的主从复制</p><p><strong>注意: master 的配置文件中masterauth 和slave 都必须相同</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#90A4AE;font-style:italic;">#在所有主从节点修改 redis.conf</span></span>
<span class="line"><span style="color:#6182B8;">echo</span><span style="color:#39ADB5;"> &quot;</span><span style="color:#91B859;">replicaof 10.0.0.8 6379</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;"> &gt;&gt;</span><span style="color:#91B859;"> /etc/redis.conf</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">#bind 0.0.0.0</span></span>
<span class="line"><span style="color:#6182B8;">echo</span><span style="color:#39ADB5;"> &quot;</span><span style="color:#91B859;">masterauth 123456</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;"> &gt;&gt;</span><span style="color:#91B859;"> /etc/redis.conf</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">#requirepass &quot;123456&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="sentinel配置" tabindex="-1">sentinel配置 <a class="header-anchor" href="#sentinel配置" aria-label="Permalink to &quot;sentinel配置&quot;">​</a></h2><p>Sentinel实际上是一个特殊的redis服务器,有些redis指令支持,但很多指令并不支持.默认监听在26379/tcp端口.</p><p>哨兵服务可以和Redis服务器分开部署在不同主机，但为了节约成本一般会部署在一起</p><p>所有redis节点使用相同的以下示例的配置文件</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#90A4AE;font-style:italic;">#如果是编译安装，在源码目录有sentinel.conf，复制到安装目录即可，</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;"># vim /etc/redis-sentinel.conf</span></span>
<span class="line"><span style="color:#E2931D;">bind</span><span style="color:#F76D47;"> 0.0.0.0</span></span>
<span class="line"><span style="color:#E2931D;">port</span><span style="color:#F76D47;"> 26379</span></span>
<span class="line"><span style="color:#E2931D;">daemonize</span><span style="color:#91B859;"> yes</span></span>
<span class="line"><span style="color:#E2931D;">pidfile</span><span style="color:#39ADB5;"> &quot;</span><span style="color:#91B859;">redis-sentinel.pid</span><span style="color:#39ADB5;">&quot;</span></span>
<span class="line"><span style="color:#E2931D;">logfile</span><span style="color:#39ADB5;"> &quot;</span><span style="color:#91B859;">sentinel_26379.log</span><span style="color:#39ADB5;">&quot;</span></span>
<span class="line"><span style="color:#E2931D;">dir</span><span style="color:#39ADB5;"> &quot;</span><span style="color:#91B859;">/tmp</span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;font-style:italic;"> #工作目录</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E2931D;">sentinel</span><span style="color:#91B859;"> monitor</span><span style="color:#91B859;"> mymaster</span><span style="color:#F76D47;"> 10.0.0.11</span><span style="color:#F76D47;"> 6379</span><span style="color:#F76D47;"> 2</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">#mymaster是集群的名称，此行指定当前mymaster集群中master服务器的地址和端口</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">#2为法定人数限制(quorum)，即有几个sentinel认为master down了就进行故障转移，一般此值是所有sentinel节点(一般总数是&gt;=3的 奇数,如:3,5,7等)的一半以上的整数值，比如，总数是3，即3/2=1.5，取整为2,是master的ODOWN客观下线的依据</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">#mymaster集群中master的密码，注意此行要在上面行的下面</span></span>
<span class="line"><span style="color:#E2931D;">sentinel</span><span style="color:#91B859;"> auth-pass</span><span style="color:#91B859;"> mymaster</span><span style="color:#F76D47;"> 123456</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">#判断mymaster集群中所有节点的主观下线(SDOWN)的时间，单位：毫秒，建议3000</span></span>
<span class="line"><span style="color:#E2931D;">sentinel</span><span style="color:#91B859;"> down-after-milliseconds</span><span style="color:#91B859;"> mymaster</span><span style="color:#F76D47;"> 30000</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">#发生故障转移后，可以同时向新master同步数据的slave的数量，数字越小总同步时间越长，但可以减轻新master的负载压力</span></span>
<span class="line"><span style="color:#E2931D;">sentinel</span><span style="color:#91B859;"> parallel-syncs</span><span style="color:#91B859;"> mymaster</span><span style="color:#F76D47;"> 1</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">#所有slaves指向新的master所需的超时时间，单位：毫秒</span></span>
<span class="line"><span style="color:#E2931D;">sentinel</span><span style="color:#91B859;"> failover-timeout</span><span style="color:#91B859;"> mymaster</span><span style="color:#F76D47;"> 180000</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E2931D;">sentinel</span><span style="color:#91B859;"> deny-scripts-reconfig</span><span style="color:#91B859;"> yes</span><span style="color:#90A4AE;font-style:italic;"> #禁止修改脚本</span></span>
<span class="line"><span style="color:#E2931D;">logfile</span><span style="color:#91B859;"> /var/log/redis/sentinel.log</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div>`,13),t=[p];function o(r,i,c,y,m,b){return a(),n("div",null,t)}const A=s(e,[["render",o]]);export{d as __pageData,A as default};

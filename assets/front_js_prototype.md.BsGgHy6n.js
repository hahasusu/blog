import{_ as s,c as n,o as a,a4 as l}from"./chunks/framework.GYzjcnJh.js";const m=JSON.parse('{"title":"原型和原型链","description":"","frontmatter":{"date":"2024-03-01 08:44:41","title":"原型和原型链"},"headers":[],"relativePath":"front/js/prototype.md","filePath":"front/js/prototype.md"}'),p={name:"front/js/prototype.md"},o=l(`<h1 id="原型和原型链" tabindex="-1">原型和原型链 <a class="header-anchor" href="#原型和原型链" aria-label="Permalink to &quot;原型和原型链&quot;">​</a></h1><blockquote><p>原型和原型链是 JavaScript 中非常重要的概念，其对于理解 JavaScript 的对象模型和继承非常重要。</p><p>通过原型和原型链，我们可以实现基于原型的继承、寄生式继承、组合式继承等多种继承方式，从而使代码更加简洁、易读、易于维护。</p></blockquote><h2 id="构造函数与实例" tabindex="-1">构造函数与实例 <a class="header-anchor" href="#构造函数与实例" aria-label="Permalink to &quot;构造函数与实例&quot;">​</a></h2><p>使用 new 运算符与构造函数是常用的创建对象的方式之一。构造函数是一种特殊的函数，用于创建新的对象实例，当我们使用 new 运算符调用一个函数时，它就成为了构造函数，因为它被用来构造一个新的对象实例</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#90A4AE;font-style:italic;">// 构造函数</span></span>
<span class="line"><span style="color:#9C3EDA;">function</span><span style="color:#6182B8;"> Person</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;font-style:italic;">name</span><span style="color:#39ADB5;">)</span><span style="color:#39ADB5;"> {</span></span>
<span class="line"><span style="color:#39ADB5;">  this.</span><span style="color:#90A4AE;">name</span><span style="color:#39ADB5;"> =</span><span style="color:#90A4AE;"> name</span></span>
<span class="line"><span style="color:#39ADB5;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">// 对象实例</span></span>
<span class="line"><span style="color:#9C3EDA;">const</span><span style="color:#90A4AE;"> person1 </span><span style="color:#39ADB5;">=</span><span style="color:#39ADB5;"> new</span><span style="color:#6182B8;"> Person</span><span style="color:#90A4AE;">(</span><span style="color:#39ADB5;">&#39;</span><span style="color:#91B859;">maomao</span><span style="color:#39ADB5;">&#39;</span><span style="color:#90A4AE;">)</span></span>
<span class="line"><span style="color:#90A4AE;">console</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">log</span><span style="color:#90A4AE;">(person1) </span><span style="color:#90A4AE;font-style:italic;">// Person {name: &#39;maomao&#39;}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="tip custom-block"><p class="custom-block-title"><strong>构造函数的特征</strong></p><p>函数名通常以大写字母开头，以便将其与普通函数区分开来（本质上没有任何区别） 使用 new 运算符生成实例的函数就是构造函数 直接调用的函数就是普通函数 构造函数中通常使用 this 关键字来指代将要创建的对象实例 构造函数中通常使用属性或方法来定义新对象实例的状态和行为</p></div><h2 id="prototype" tabindex="-1">prototype <a class="header-anchor" href="#prototype" aria-label="Permalink to &quot;prototype&quot;">​</a></h2><p>在 JavaScript 中，每个函数都有一个原型属性 prototype，其指向调用该构造函数而创建的实例的原型（原型可以是 null 或其他对象）</p><p>在原型对象（prototype）上定义的属性和方法会被对象实例共享</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">function</span><span style="color:#6182B8;"> Person</span><span style="color:#39ADB5;">()</span><span style="color:#39ADB5;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E2931D;">Person</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">prototype</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">name </span><span style="color:#39ADB5;">=</span><span style="color:#39ADB5;"> &#39;</span><span style="color:#91B859;">maomao</span><span style="color:#39ADB5;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">// 对象实例 person1</span></span>
<span class="line"><span style="color:#9C3EDA;">const</span><span style="color:#90A4AE;"> person1 </span><span style="color:#39ADB5;">=</span><span style="color:#39ADB5;"> new</span><span style="color:#6182B8;"> Person</span><span style="color:#90A4AE;">()</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">// 对象实例 person2</span></span>
<span class="line"><span style="color:#9C3EDA;">const</span><span style="color:#90A4AE;"> person2 </span><span style="color:#39ADB5;">=</span><span style="color:#39ADB5;"> new</span><span style="color:#6182B8;"> Person</span><span style="color:#90A4AE;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">console</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">log</span><span style="color:#90A4AE;">(person1</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">name</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> person2</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">name) </span><span style="color:#90A4AE;font-style:italic;">// &#39;maomao&#39; &#39;maomao&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="constructor" tabindex="-1">constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;constructor&quot;">​</a></h2><p>每一个原型对象 prototype 都有一个 constructor 属性，其指向原型的构造函数</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">function</span><span style="color:#6182B8;"> Person</span><span style="color:#39ADB5;">()</span><span style="color:#39ADB5;"> {}</span></span>
<span class="line"><span style="color:#E2931D;">Person</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">prototype </span><span style="color:#90A4AE;font-style:italic;">// { constructor: ƒ Person(name) }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E2931D;">Person</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">prototype</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">constructor </span><span style="color:#39ADB5;">===</span><span style="color:#90A4AE;"> Person </span><span style="color:#90A4AE;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="proto" tabindex="-1">__proto__ <a class="header-anchor" href="#proto" aria-label="Permalink to &quot;\\_\\_proto\\_\\_&quot;">​</a></h2><p>在 JavaScript 中，每个对象都有一个 <code>__proto__</code> 属性，其指向创建该对象的函数的 prototype，即构造函数的原型（也称其为隐私原型）</p><div class="warning custom-block"><p class="custom-block-title">__proto__ 注意点</p><p><strong>proto</strong> 用来读取或设置当前对象的原型对象，其本质上是一个内部属性，不是一个正式的对外的 API，只是由于浏览器广泛支持，才被加入了 ES6 以确保 Web 浏览器的兼容性，同时该属性已不推荐使用，在实际开发中更推荐使用 ES6 提供的 JavaScript</p><p>读取当前对象的原型对象</p><ul><li>Object.getPrototypeOf</li><li>Reflect.getPrototypeOf</li></ul><p>设置当前对象的原型对象</p><ul><li>Object.setPrototypeOf</li><li>Reflect.setPrototypeOf</li></ul></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#90A4AE;font-style:italic;">// 构造函数</span></span>
<span class="line"><span style="color:#9C3EDA;">function</span><span style="color:#6182B8;"> Person</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;font-style:italic;">name</span><span style="color:#39ADB5;">)</span><span style="color:#39ADB5;"> {</span></span>
<span class="line"><span style="color:#39ADB5;">  this.</span><span style="color:#90A4AE;">name</span><span style="color:#39ADB5;"> =</span><span style="color:#90A4AE;"> name</span></span>
<span class="line"><span style="color:#39ADB5;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">// 对象实例</span></span>
<span class="line"><span style="color:#9C3EDA;">const</span><span style="color:#90A4AE;"> person </span><span style="color:#39ADB5;">=</span><span style="color:#39ADB5;"> new</span><span style="color:#6182B8;"> Person</span><span style="color:#90A4AE;">(</span><span style="color:#39ADB5;">&#39;</span><span style="color:#91B859;">maomao</span><span style="color:#39ADB5;">&#39;</span><span style="color:#90A4AE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">person</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">__proto__ </span><span style="color:#39ADB5;">===</span><span style="color:#E2931D;"> Person</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">prototype </span><span style="color:#90A4AE;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#90A4AE;">Object</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getPrototypeOf</span><span style="color:#90A4AE;">(person) </span><span style="color:#39ADB5;">===</span><span style="color:#E2931D;"> Person</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">prototype </span><span style="color:#90A4AE;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#90A4AE;">Reflect</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getPrototypeOf</span><span style="color:#90A4AE;">(person) </span><span style="color:#39ADB5;">===</span><span style="color:#E2931D;"> Person</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">prototype </span><span style="color:#90A4AE;font-style:italic;">// trueG</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="原型链" tabindex="-1">原型链 <a class="header-anchor" href="#原型链" aria-label="Permalink to &quot;原型链&quot;">​</a></h2><blockquote><p>每个对象都拥有一个原型对象，通过 <strong>proto</strong> 指针指向上一个原型 ，并从中继承方法和属性，</p><p>同时原型对象也可能拥有原型，这样一层一层，最终指向 null。这个链式结构被称为原型链。</p></blockquote><p>通过原型链一个对象会拥有定义在其他对象中的属性和方法，从而使得对象之间可以共享属性和方法，从而避免重复代码的出现。</p><p>所以当我们尝试访问一个对象的属性时，JavaScript 首先在对象本身中查找该属性。如果它没有找到该属性，它会继续在对象的原型中查找，然后在原型的原型中查找，以此类推，直到找到该属性或原型链的顶部</p><h2 id="object-和-function" tabindex="-1">Object 和 function <a class="header-anchor" href="#object-和-function" aria-label="Permalink to &quot;Object 和 function&quot;">​</a></h2><h3 id="引用类型都是对象" tabindex="-1">引用类型都是对象 <a class="header-anchor" href="#引用类型都是对象" aria-label="Permalink to &quot;引用类型都是对象&quot;">​</a></h3><blockquote><p>在 JavaScript 中一切引用类型都是对象（函数是一种函数对象），对象是属性的集合</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#90A4AE;font-style:italic;">/* 为对象定义属性 */</span></span>
<span class="line"><span style="color:#9C3EDA;">const</span><span style="color:#90A4AE;"> obj </span><span style="color:#39ADB5;">=</span><span style="color:#39ADB5;"> {</span><span style="color:#E53935;"> a</span><span style="color:#39ADB5;">:</span><span style="color:#39ADB5;"> &#39;</span><span style="color:#91B859;">obj</span><span style="color:#39ADB5;">&#39;</span><span style="color:#39ADB5;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">/* 为数组定义属性 */</span></span>
<span class="line"><span style="color:#9C3EDA;">const</span><span style="color:#90A4AE;"> arr </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> []</span></span>
<span class="line"><span style="color:#90A4AE;">arr</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">a </span><span style="color:#39ADB5;">=</span><span style="color:#39ADB5;"> &#39;</span><span style="color:#91B859;">arr</span><span style="color:#39ADB5;">&#39;</span><span style="color:#90A4AE;font-style:italic;"> // &#39;arr&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">/* 为函数定义属性 */</span></span>
<span class="line"><span style="color:#9C3EDA;">const</span><span style="color:#90A4AE;"> fn </span><span style="color:#39ADB5;">=</span><span style="color:#9C3EDA;"> function</span><span style="color:#39ADB5;"> ()</span><span style="color:#39ADB5;"> {}</span></span>
<span class="line"><span style="color:#90A4AE;">fn</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">a </span><span style="color:#39ADB5;">=</span><span style="color:#39ADB5;"> &#39;</span><span style="color:#91B859;">fn</span><span style="color:#39ADB5;">&#39;</span><span style="color:#90A4AE;font-style:italic;"> // &#39;fn&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="function" tabindex="-1">Function <a class="header-anchor" href="#function" aria-label="Permalink to &quot;Function&quot;">​</a></h3><blockquote><p>Function 构造函数是一个函数对象，其 [[Class]] 属性是 Function。Function 的 [[Prototype]]（即__proto__）属性指向了 Function.prototype</p></blockquote><p>同时每个 JavaScript 函数实际上都是一个 Function 对象，即 Function 的实例</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#90A4AE;">Function </span><span style="color:#39ADB5;">instanceof</span><span style="color:#E2931D;"> Object</span><span style="color:#90A4AE;font-style:italic;"> // true</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">// 实际如下</span></span>
<span class="line"><span style="color:#90A4AE;">Object</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">__proto__ </span><span style="color:#39ADB5;">===</span><span style="color:#E2931D;"> Function</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">prototype </span><span style="color:#90A4AE;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">Object </span><span style="color:#39ADB5;">instanceof</span><span style="color:#E2931D;"> Function</span><span style="color:#90A4AE;font-style:italic;"> // true</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">// 实际如下</span></span>
<span class="line"><span style="color:#90A4AE;">Function</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">__proto__</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">__proto__ </span><span style="color:#39ADB5;">===</span><span style="color:#E2931D;"> Object</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">prototype </span><span style="color:#90A4AE;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">Function </span><span style="color:#39ADB5;">instanceof</span><span style="color:#E2931D;"> Function</span><span style="color:#90A4AE;font-style:italic;"> // true</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">// 实际如下</span></span>
<span class="line"><span style="color:#90A4AE;">Function</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">__proto__ </span><span style="color:#39ADB5;">===</span><span style="color:#E2931D;"> Function</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">prototype </span><span style="color:#90A4AE;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>`,29),e=[o];function t(r,c,i,y,A,b){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{m as __pageData,d as default};

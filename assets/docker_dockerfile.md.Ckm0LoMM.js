import{_ as s,c as n,o as a,a4 as l}from"./chunks/framework.GYzjcnJh.js";const D=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docker/dockerfile.md","filePath":"backend/docker/dockerfile.md"}'),p={name:"docker/dockerfile.md"},e=l(`<div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#90A4AE;font-style:italic;"># 构建镜像，不加-f默认当前目录的 dockerfile</span></span>
<span class="line"><span style="color:#E2931D;">docker</span><span style="color:#91B859;"> build</span><span style="color:#91B859;"> -f</span><span style="color:#91B859;"> Dockerfile路径</span><span style="color:#91B859;">  -t</span><span style="color:#91B859;"> name:tag</span><span style="color:#91B859;"> .</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E2931D;">Dockerfile</span><span style="color:#91B859;"> 的指令每执行一次都会在</span><span style="color:#91B859;"> docker</span><span style="color:#91B859;"> 上新建一层。所以过多无意义的层，会造成镜像膨胀过大。</span></span>
<span class="line"><span style="color:#E2931D;">以</span><span style="color:#39ADB5;"> &amp;&amp;</span><span style="color:#E2931D;"> 符号连接命令，这样执行后，只会创建</span><span style="color:#F76D47;"> 1</span><span style="color:#91B859;"> 层镜像。</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E2931D;">WORKDIR。创建容器后，进入终端时的默认工作目录</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;"># 用于运行程序，但二者运行的时间点不同:</span></span>
<span class="line"><span style="color:#E2931D;">CMD</span><span style="color:#91B859;"> 在docker</span><span style="color:#91B859;"> run</span><span style="color:#91B859;"> 时运行。</span></span>
<span class="line"><span style="color:#E2931D;">RUN</span><span style="color:#91B859;"> 是在</span><span style="color:#91B859;"> docker</span><span style="color:#91B859;"> build。</span></span>
<span class="line"><span style="color:#E2931D;">RUN</span><span style="color:#39ADB5;"> &lt;</span><span style="color:#91B859;">命令行命</span><span style="color:#90A4AE;">令</span><span style="color:#39ADB5;">&gt;</span><span style="color:#90A4AE;font-style:italic;"> # &lt;命令行命令&gt; 等同于，在终端操作的 shell 命令。</span></span>
<span class="line"><span style="color:#E2931D;">RUN</span><span style="color:#90A4AE;"> [</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">可执行文件</span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;">, </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">参数1</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">,</span><span style="color:#39ADB5;"> &quot;</span><span style="color:#91B859;">参数2</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">]</span><span style="color:#90A4AE;font-style:italic;"> # RUN [&quot;./test.php&quot;, &quot;dev&quot;, &quot;offline&quot;] 等价于 RUN ./test.php dev offline</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E2931D;">EXPOSE</span></span>
<span class="line"><span style="color:#E2931D;">仅仅只是声明端口。</span></span>
<span class="line"><span style="color:#E2931D;">作用：</span><span style="color:#91B859;"> 帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。</span></span>
<span class="line"><span style="color:#E2931D;">在运行时使用随机端口映射时，也就是</span><span style="color:#91B859;"> docker</span><span style="color:#91B859;"> run</span><span style="color:#91B859;"> -P</span><span style="color:#91B859;"> 时，会自动随机映射</span><span style="color:#91B859;"> EXPOSE</span><span style="color:#91B859;"> 的端口。</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E2931D;">ADD和COPY</span><span style="color:#91B859;"> 复制指令，拷贝文件或目录</span><span style="color:#91B859;"> 到容器内。</span></span>
<span class="line"><span style="color:#E2931D;">COPY</span><span style="color:#91B859;"> src</span><span style="color:#91B859;"> dest</span></span>
<span class="line"><span style="color:#E2931D;">ADD</span><span style="color:#91B859;"> 和</span><span style="color:#91B859;"> COPY</span><span style="color:#91B859;"> 的使用格式一致（同样需求下，官方推荐使用</span><span style="color:#91B859;"> COPY）。功能也类似，不同之处如下：</span></span>
<span class="line"><span style="color:#E2931D;">ADD</span><span style="color:#91B859;"> 的优点：在执行</span><span style="color:#39ADB5;"> &lt;</span><span style="color:#91B859;">源文</span><span style="color:#90A4AE;">件</span><span style="color:#39ADB5;">&gt;</span><span style="color:#91B859;"> 为</span><span style="color:#91B859;"> tar</span><span style="color:#91B859;"> 压缩文件的话，压缩格式为</span><span style="color:#91B859;"> gzip,</span><span style="color:#91B859;"> bzip2</span><span style="color:#91B859;"> 以及</span><span style="color:#91B859;"> xz</span><span style="color:#91B859;"> 的情况下，会自动复制并解压到</span><span style="color:#39ADB5;"> &lt;</span><span style="color:#91B859;">目标路</span><span style="color:#90A4AE;">径</span><span style="color:#39ADB5;">&gt;</span><span style="color:#91B859;">。</span></span>
<span class="line"><span style="color:#E2931D;">ADD</span><span style="color:#91B859;"> 的缺点：在不解压的前提下，无法复制</span><span style="color:#91B859;"> tar</span><span style="color:#91B859;"> 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E2931D;">CMD</span><span style="color:#91B859;"> ENTRYPOINT</span><span style="color:#91B859;"> 指定容器启动时要运行的命令</span></span>
<span class="line"><span style="color:#E2931D;">dockerfile</span><span style="color:#91B859;"> 可以有多个CMD，但只有最后一个生效</span></span>
<span class="line"><span style="color:#E2931D;">CMD后的命令会被docker</span><span style="color:#91B859;"> run</span><span style="color:#91B859;"> 后的参数覆盖</span></span>
<span class="line"><span style="color:#E2931D;">ENTRYPINT后的命令则会追加</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div>`,1),o=[e];function r(c,t,i,y,b,B){return a(),n("div",null,o)}const m=s(p,[["render",r]]);export{D as __pageData,m as default};

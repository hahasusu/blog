import{_ as a,c as s,o as n,a4 as o}from"./chunks/framework.GYzjcnJh.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{"date":"2024-03-24 08:34:52"},"headers":[],"relativePath":"devops/loadbalance/haproxy/scheduling.md","filePath":"devops/loadbalance/haproxy/scheduling.md"}'),e={name:"devops/loadbalance/haproxy/scheduling.md"},l=o(`<blockquote><p>HAProxy通过固定参数 balance 指明对后端服务器的调度算法，该参数可以配置在listen或backend选 项中。</p></blockquote><p>HAProxy的调度算法分为静态和动态调度算法，但是有些算法可以根据参数在静态和动态算法中相互转 换</p><h2 id="socat-工具" tabindex="-1">Socat 工具 <a class="header-anchor" href="#socat-工具" aria-label="Permalink to &quot;Socat 工具&quot;">​</a></h2><p>对服务器动态权重和其它状态可以利用 socat工具进行调整，Socat 是 Linux 下的一个多功能的网络工 具，名字来由是Socket CAT，相当于netCAT的增强版</p><p>利用工具socat 对服务器动态权重调整:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#E2931D;">yum</span><span style="color:#91B859;"> -y</span><span style="color:#91B859;"> install</span><span style="color:#91B859;"> socat</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">#查看帮助</span></span>
<span class="line"><span style="color:#E2931D;">socat</span><span style="color:#91B859;"> -h</span></span>
<span class="line"><span style="color:#6182B8;">echo</span><span style="color:#39ADB5;"> &quot;</span><span style="color:#91B859;">help</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;"> |</span><span style="color:#E2931D;"> socat</span><span style="color:#91B859;"> stdio</span><span style="color:#91B859;"> /var/lib/haproxy/haproxy.sock</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">#获取当前连接数</span></span>
<span class="line"><span style="color:#6182B8;">echo</span><span style="color:#39ADB5;"> &quot;</span><span style="color:#91B859;">show info</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;"> |</span><span style="color:#E2931D;"> socat</span><span style="color:#91B859;"> stdio</span><span style="color:#91B859;"> /var/lib/haproxy/haproxy.sock</span><span style="color:#39ADB5;"> |</span><span style="color:#E2931D;"> awk</span><span style="color:#39ADB5;"> &#39;</span><span style="color:#91B859;">/CurrConns/{print $2}</span><span style="color:#39ADB5;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;"># 修改weight</span></span>
<span class="line"><span style="color:#6182B8;">echo</span><span style="color:#39ADB5;"> &quot;</span><span style="color:#91B859;">set weight ip/websrv1 2</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;"> |</span><span style="color:#E2931D;"> socat</span><span style="color:#91B859;"> stdio</span><span style="color:#91B859;"> /var/lib/haproxy/haproxy.sock</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;"># disable server</span></span>
<span class="line"><span style="color:#6182B8;">echo</span><span style="color:#39ADB5;"> &quot;</span><span style="color:#91B859;">set server ip/websrv1 state maint</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;"> |</span><span style="color:#E2931D;"> socat</span><span style="color:#91B859;"> stdio</span><span style="color:#91B859;"> /var/lib/haproxy/haproxy.sock</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="静态算法" tabindex="-1">静态算法 <a class="header-anchor" href="#静态算法" aria-label="Permalink to &quot;静态算法&quot;">​</a></h2><p>静态算法：按照事先定义好的规则轮询进行调度，不关心后端服务器的当前负载、连接数和响应速度 等，且无法实时动态修改权重(只能为0和1,不支持其它值)或者修改后不生效，如果需要修改只能靠重启 HAProxy生效。</p><h3 id="rr-算法" tabindex="-1">rr 算法 <a class="header-anchor" href="#rr-算法" aria-label="Permalink to &quot;rr 算法&quot;">​</a></h3><blockquote><p>基于权重的轮询调度，不支持运行时利用socat进行权重的动态调整(只支持0和1,不支持其它值)及后端服务器慢启动，其后端主机数量没有限制，相当于LVS中的 wrr</p></blockquote><h3 id="first-算法" tabindex="-1">first 算法 <a class="header-anchor" href="#first-算法" aria-label="Permalink to &quot;first 算法&quot;">​</a></h3><blockquote><p>根据服务器在列表中的位置，自上而下进行调度，但是其只会当第一台服务器的连接数达到上限，新请求才会分配给下一台服务，因此会忽略服务器的权重设置，此方式使用较少</p></blockquote><h2 id="动态算法" tabindex="-1">动态算法 <a class="header-anchor" href="#动态算法" aria-label="Permalink to &quot;动态算法&quot;">​</a></h2><blockquote><p>基于后端服务器状态进行调度适当调整，新请求将优先调度至当前负载较低的服务器，且权重可以在haproxy运行时动态调整无需重启。</p></blockquote><h3 id="roundrobin" tabindex="-1">roundrobin <a class="header-anchor" href="#roundrobin" aria-label="Permalink to &quot;roundrobin&quot;">​</a></h3><blockquote><p>基于权重的轮询动态调度算法，支持权重的运行时调整，不同于lvs中的rr轮训模式，HAProxy中的roundrobin支持慢启动(新加的服务器会逐渐增加转发数)，其每个后端backend中最多支持4095个real server，支持对real server权重动态调整，roundrobin为默认调度算法,此算法使用广泛</p></blockquote><h2 id="leastconn" tabindex="-1">leastconn <a class="header-anchor" href="#leastconn" aria-label="Permalink to &quot;leastconn&quot;">​</a></h2><blockquote><p>leastconn 加权的最少连接的动态，支持权重的运行时调整和慢启动，即根据当前连接最少的后端服务 器而非权重进行优先调度(新客户端连接)，比较适合长连接的场景使用，比如：MySQL等场景</p></blockquote><h2 id="其它算法" tabindex="-1">其它算法 <a class="header-anchor" href="#其它算法" aria-label="Permalink to &quot;其它算法&quot;">​</a></h2><h3 id="url-param" tabindex="-1">url_param <a class="header-anchor" href="#url-param" aria-label="Permalink to &quot;url_param&quot;">​</a></h3><p>对用户请求的url中的 params 部分中的一个参数key对应的value值作hash计算，并由服务器总权重相除以后派发至某挑出的服务器；通常用于追踪用户，以确保来自同一个用户的请求始终发往同一个real server，如果无没key，将按roundrobin算法</p>`,21),r=[l];function p(t,c,i,b,h,u){return n(),s("div",null,r)}const m=a(e,[["render",p]]);export{y as __pageData,m as default};

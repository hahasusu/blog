import{_ as s,c as n,o as a,a4 as l}from"./chunks/framework.GYzjcnJh.js";const m=JSON.parse('{"title":"lazy.nvim","description":"","frontmatter":{},"headers":[],"relativePath":"linux/lazy-nvim.md","filePath":"linux/lazy-nvim.md"}'),e={name:"linux/lazy-nvim.md"},p=l(`<h1 id="lazy-nvim" tabindex="-1">lazy.nvim <a class="header-anchor" href="#lazy-nvim" aria-label="Permalink to &quot;lazy.nvim&quot;">​</a></h1><blockquote><p><code>lazy.nvim</code>是 Neovim 的现代插件管理器。</p></blockquote><h2 id="结构" tabindex="-1">结构 <a class="header-anchor" href="#结构" aria-label="Permalink to &quot;结构&quot;">​</a></h2><p><code>opts</code>, <code>dependencies</code>, <code>cmd</code>, <code>event</code>, <code>ft</code> and <code>keys</code> are always merged with the parent spec. Any other property will override the property from the parent spec.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#39ADB5;">~</span><span style="color:#90A4AE;">/.config/nvim</span></span>
<span class="line"><span style="color:#E2931D;">├──</span><span style="color:#91B859;"> lua</span></span>
<span class="line"><span style="color:#E2931D;">│</span><span style="color:#91B859;">   ├──</span><span style="color:#91B859;"> config</span></span>
<span class="line"><span style="color:#E2931D;">│</span><span style="color:#91B859;">   │</span><span style="color:#91B859;">   └──</span><span style="color:#91B859;"> lazy.lua</span></span>
<span class="line"><span style="color:#E2931D;">│</span><span style="color:#91B859;">   └──</span><span style="color:#91B859;"> plugins</span></span>
<span class="line"><span style="color:#E2931D;">│</span><span style="color:#91B859;">       ├──</span><span style="color:#91B859;"> spec1.lua</span></span>
<span class="line"><span style="color:#E2931D;">│</span><span style="color:#91B859;">       ├──</span><span style="color:#90A4AE;"> **</span></span>
<span class="line"><span style="color:#E2931D;">│</span><span style="color:#91B859;">       └──</span><span style="color:#91B859;"> spec2.lua</span></span>
<span class="line"><span style="color:#E2931D;">└──</span><span style="color:#91B859;"> init.lua</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="lazy-load" tabindex="-1">Lazy Load <a class="header-anchor" href="#lazy-load" aria-label="Permalink to &quot;Lazy Load&quot;">​</a></h2><p>当满足以下条件之一时，插件将被延迟加载：</p><ul><li>The plugin only exists as a dependency in your spec</li><li>It has an event, cmd, ft or keys key</li><li>config.defaults.lazy == true</li></ul><h2 id="opts" tabindex="-1">opts <a class="header-anchor" href="#opts" aria-label="Permalink to &quot;opts&quot;">​</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#E2931D;">&quot;nvim-neorg/neorg&quot;</span><span style="color:#E2931D;">,</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">#  options for neorg. This will automatically call \`require(&quot;neorg&quot;).setup(opts)\`</span></span>
<span class="line"><span style="color:#E2931D;">    opts</span><span style="color:#91B859;"> =</span><span style="color:#91B859;"> {</span></span>
<span class="line"><span style="color:#E2931D;">        load</span><span style="color:#91B859;"> =</span><span style="color:#91B859;"> {</span></span>
<span class="line"><span style="color:#39ADB5;">            [</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">core.defaults</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">]</span><span style="color:#91B859;"> =</span><span style="color:#91B859;"> {},</span></span>
<span class="line"><span style="color:#39ADB5;">        }</span><span style="color:#90A4AE;">,</span></span>
<span class="line"><span style="color:#90A4AE;">    },</span></span>
<span class="line"><span style="color:#90A4AE;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="init" tabindex="-1">init <a class="header-anchor" href="#init" aria-label="Permalink to &quot;init&quot;">​</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#39ADB5;">  {</span></span>
<span class="line"><span style="color:#E2931D;">    &quot;dstein64/vim-startuptime&quot;</span><span style="color:#E2931D;">,</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">    # init is called during startup. Configuration for vim plugins typically should be set in an init function</span></span>
<span class="line"><span style="color:#E2931D;">    init</span><span style="color:#91B859;"> =</span><span style="color:#91B859;"> function</span><span style="color:#39ADB5;">()</span></span>
<span class="line"><span style="color:#E2931D;">      vim.g.startuptime_tries</span><span style="color:#91B859;"> =</span><span style="color:#F76D47;"> 10</span></span>
<span class="line"><span style="color:#90A4AE;">    end,</span></span>
<span class="line"><span style="color:#39ADB5;">  }</span><span style="color:#90A4AE;">,</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="dependencies" tabindex="-1">dependencies <a class="header-anchor" href="#dependencies" aria-label="Permalink to &quot;dependencies&quot;">​</a></h2><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#90A4AE;"> {</span></span>
<span class="line"><span style="color:#39ADB5;">    &quot;</span><span style="color:#91B859;">hrsh7th/nvim-cmp</span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;">,</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">    -- load cmp on InsertEnter</span></span>
<span class="line"><span style="color:#90A4AE;">    event </span><span style="color:#39ADB5;">=</span><span style="color:#39ADB5;"> &quot;</span><span style="color:#91B859;">InsertEnter</span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;">,</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">    -- these dependencies will only be loaded when cmp loads</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">    -- dependencies are always lazy-loaded unless specified otherwise</span></span>
<span class="line"><span style="color:#90A4AE;">    dependencies </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> {</span></span>
<span class="line"><span style="color:#39ADB5;">      &quot;</span><span style="color:#91B859;">hrsh7th/cmp-nvim-lsp</span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;">,</span></span>
<span class="line"><span style="color:#90A4AE;">    },</span></span>
<span class="line"><span style="color:#6182B8;">    config</span><span style="color:#39ADB5;"> =</span><span style="color:#39ADB5;font-style:italic;"> function</span><span style="color:#39ADB5;">()</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">      -- ...</span></span>
<span class="line"><span style="color:#39ADB5;font-style:italic;">    end</span><span style="color:#90A4AE;">,</span></span>
<span class="line"><span style="color:#90A4AE;">  },</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>`,14),o=[p];function r(t,c,i,y,d,u){return a(),n("div",null,o)}const h=s(e,[["render",r]]);export{m as __pageData,h as default};

import{_ as s,c as n,o as a,a4 as l}from"./chunks/framework.GYzjcnJh.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"db/mysql/view.md","filePath":"backend/db/mysql/view.md"}'),p={name:"db/mysql/view.md"},e=l(`<h2 id="视图" tabindex="-1">视图 <a class="header-anchor" href="#视图" aria-label="Permalink to &quot;视图&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>视图即是虚拟表，也称为派生表，因为它们的内容都派生自其它表的查询结果。虽然视图看起来感觉和基本表一样，但是它们不是基本表。基本表的内容是持久的，而视图的内容是在使用过程中动态产生的。</p></div><p><code>视图根本用途在我看来就一个：简化sql查询，提高开发效率。</code></p><ol><li>简单：使用视图的用户完全不需要关心后面对应的表的结构、关联条件和筛选条件，对用户来说已经是过滤好的复合条件的结果集.</li><li>使用视图的用户只能访问他们被允许查询的结果集，对表的权限管理并不能限制到某个行某个列，但是通过视图就可以简单的实现。</li></ol><p>总而言之，使用视图的大部分情况是为了保障数据安全性，提高查询效率。比如说我们经常用到几个表的关联结果，那么我们就可以使用视图来处理，或者说第三方程序需要调用我们的业务库，可以按需创建视图给第三方程序查询。</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#90A4AE;font-style:italic;">-- 创建视图标准语法：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F76D47;">CREATE</span></span>
<span class="line"><span style="color:#90A4AE;">    [OR REPLACE]</span></span>
<span class="line"><span style="color:#90A4AE;">    [ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}]</span></span>
<span class="line"><span style="color:#90A4AE;">    [DEFINER = user]</span></span>
<span class="line"><span style="color:#90A4AE;">    [SQL SECURITY { DEFINER | INVOKER }]</span></span>
<span class="line"><span style="color:#90A4AE;">    VIEW view_name [(column_list)]</span></span>
<span class="line"><span style="color:#F76D47;">    AS</span><span style="color:#90A4AE;"> select_statement</span></span>
<span class="line"><span style="color:#90A4AE;">    [WITH [CASCADED | LOCAL] </span><span style="color:#9C3EDA;">CHECK</span><span style="color:#F76D47;"> OPTION</span><span style="color:#90A4AE;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F76D47;">1</span><span style="color:#90A4AE;">）</span><span style="color:#F76D47;">OR</span><span style="color:#F76D47;"> REPLACE</span><span style="color:#90A4AE;">：表示替换已有视图，如果该视图不存在，则CREATE </span><span style="color:#F76D47;">OR</span><span style="color:#F76D47;"> REPLACE</span><span style="color:#90A4AE;"> VIEW与CREATE VIEW相同。</span></span>
<span class="line"><span style="color:#F76D47;">2</span><span style="color:#90A4AE;">）</span><span style="color:#F76D47;">ALGORITHM</span><span style="color:#90A4AE;">：表示视图选择算法，默认算法是UNDEFINED(未定义的)：MySQL自动选择要使用的算法 ；merge合并；temptable临时表，一般该参数不显式指定。</span></span>
<span class="line"><span style="color:#F76D47;">3</span><span style="color:#90A4AE;">）DEFINER：指出谁是视图的创建者或定义者，如果不指定该选项，则创建视图的用户就是定义者。</span></span>
<span class="line"><span style="color:#F76D47;">4</span><span style="color:#90A4AE;">）</span><span style="color:#F76D47;">SQL</span><span style="color:#F76D47;"> SECURITY</span><span style="color:#90A4AE;">：SQL安全性，默认为DEFINER。</span></span>
<span class="line"><span style="color:#F76D47;">5</span><span style="color:#90A4AE;">）select_statement：表示select语句，可以从基表或其他视图中进行选择。</span></span>
<span class="line"><span style="color:#F76D47;">6</span><span style="color:#90A4AE;">）</span><span style="color:#F76D47;">WITH</span><span style="color:#9C3EDA;"> CHECK</span><span style="color:#F76D47;"> OPTION</span><span style="color:#90A4AE;">：表示视图在更新时保证约束，默认是CASCADED。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F76D47;">create</span><span style="color:#90A4AE;"> view </span><span style="color:#39ADB5;">&lt;</span><span style="color:#90A4AE;">视图名称</span><span style="color:#39ADB5;">&gt;</span><span style="color:#90A4AE;"> [(column_list)] </span><span style="color:#F76D47;">as</span><span style="color:#90A4AE;"> select语句 </span><span style="color:#F76D47;">with</span><span style="color:#9C3EDA;"> check</span><span style="color:#F76D47;"> option</span><span style="color:#90A4AE;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div>`,6),o=[e];function c(r,t,i,A,E,y){return a(),n("div",null,o)}const D=s(p,[["render",c]]);export{m as __pageData,D as default};

import{_ as s,c as a,o as n,a4 as l}from"./chunks/framework.GYzjcnJh.js";const m=JSON.parse('{"title":"AWK","description":"","frontmatter":{"title":"AWK"},"headers":[],"relativePath":"linux/awk.md","filePath":"linux/awk.md"}'),e={name:"linux/awk.md"},t=l(`<h1 id="awk" tabindex="-1">AWK <a class="header-anchor" href="#awk" aria-label="Permalink to &quot;AWK&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>AWK 是一种处理文本文件的语言，是一个强大的文本分析工具。 之所以叫 AWK 是因为其取了三位创始人 Alfred Aho，Peter Weinberger, 和 Brian Kernighan 的 Family Name 的首字符。<br> awk 不仅仅是工具软件，还是一种编程语言</p></div><blockquote><p>AWK 是一种处理文本文件的语言，是一个强大的文本分析工具。 之所以叫 AWK 是因为其取了三位创始人 Alfred Aho，Peter Weinberger, 和 Brian Kernighan 的 Family Name 的首字符。<br> awk 不仅仅是工具软件，还是一种编程语言</p></blockquote><h2 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#E2931D;">awk</span><span style="color:#90A4AE;"> [选项参数] </span><span style="color:#39ADB5;">&#39;</span><span style="color:#91B859;">script</span><span style="color:#39ADB5;">&#39;</span><span style="color:#90A4AE;"> var</span><span style="color:#39ADB5;">=</span><span style="color:#91B859;">value</span><span style="color:#E2931D;"> file(s</span><span style="color:#90A4AE;">)</span></span>
<span class="line"><span style="color:#E2931D;">或</span></span>
<span class="line"><span style="color:#E2931D;">awk</span><span style="color:#90A4AE;"> [选项参数] -f scriptfile var</span><span style="color:#39ADB5;">=</span><span style="color:#91B859;">value</span><span style="color:#E2931D;"> file(s</span><span style="color:#90A4AE;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>常用选项</strong>:</p><ul><li>-F fs fs指定输入分隔符，fs可以是字符串或正则表达式，如-F:，默认的分隔符是连续的空格或制表符</li><li>-v var=value 赋值一个用户定义变量，将外部变量传递给awk</li><li>-f scripfile 从脚本文件中读取awk命令</li></ul><h2 id="awk模式和操作" tabindex="-1">awk模式和操作 <a class="header-anchor" href="#awk模式和操作" aria-label="Permalink to &quot;awk模式和操作&quot;">​</a></h2><p><code>awk脚本是由模式和操作组成的。</code>:</p><blockquote><p>pattern ,根据pattern条件，匹配的行才做处理<br> 如果未指定，空模式，匹配每一行</p></blockquote><p><strong>模式</strong><br> 模式可以是以下任意一个：</p><ul><li>/正则表达式/：使用通配符的扩展集。</li><li>关系表达式：使用运算符进行操作，可以是字符串或数字的比较测试。</li><li>模式匹配表达式：用运算符~（匹配）和!~（不匹配）。</li><li>BEGIN语句块、pattern语句块、END语句块：参见awk的工作原理</li></ul><p><strong>操作</strong><br> 操作由一个或多个命令、函数、表达式组成，之间由换行符或分号隔开，并位于<code>大括号内</code>，主要部分是：</p><ul><li>变量或数组赋值</li><li>输出命令</li><li>内置函数</li><li>控制流语句</li></ul><h2 id="工作原理" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理" aria-label="Permalink to &quot;工作原理&quot;">​</a></h2><p><code>awk &#39;BEGIN{ commands } pattern{ commands } END{ commands }&#39;</code></p><ol><li>第一步：执行BEGIN{ commands }语句块中的语句；</li><li>第二步：从文件或标准输入(stdin)读取一行，然后执行pattern{ commands }语句块，它逐行扫描文件，从第一行到最后一行重复这个过程，直到文件全部被读取完毕。</li><li>第三步：当读至输入流末尾时，执行END{ commands }语句块。</li></ol><p><code>BEGIN语句块</code> 在awk开始从输入流中读取行 之前 被执行，这是一个可选的语句块，比如变量初始化、打印输出表格的表头等语句通常可以写在BEGIN语句块中。</p><p><code>END语句块</code> 在awk从输入流中读取完所有的行 之后 即被执行，比如打印所有行的分析结果这类信息汇总都是在END语句块中完成，它也是一个可选语句块。</p><p><code>pattern语句块</code> 中的通用命令是最重要的部分，它也是可选的。如果没有提供pattern语句块，则默认执行{ print }，即打印每一个读取到的行，awk读取的每一行都会执行该语句块。</p><h2 id="内置变量" tabindex="-1">内置变量 <a class="header-anchor" href="#内置变量" aria-label="Permalink to &quot;内置变量&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Column1</th><th>Column2</th></tr></thead><tbody><tr><td>$1~$n</td><td>当前记录的第n个字段，字段间由FS分隔</td></tr><tr><td>FS</td><td>输入字段分隔符 默认是空格</td></tr><tr><td>NF</td><td>当前记录中的字段个数，就是有多少列</td></tr><tr><td>NR</td><td>已经读出的记录数，就是行号，从1开始</td></tr><tr><td>OFS</td><td>输出字段分隔符 默认也是空格</td></tr><tr><td>ARGC</td><td>命令行参数个数</td></tr><tr><td>ARGV</td><td>命令行参数数组</td></tr><tr><td>Item1.4</td><td>Item2.4</td></tr></tbody></table><ul><li><strong>RS</strong> 输入记录分隔符，默认回车</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#E2931D;">cat</span><span style="color:#91B859;"> file.txt</span></span>
<span class="line"><span style="color:#E2931D;">a,b,c</span><span style="color:#39ADB5;">;</span><span style="color:#E2931D;">1,2,3</span><span style="color:#39ADB5;">;</span><span style="color:#E2931D;">x,y,z</span></span>
<span class="line"><span style="color:#E2931D;">awk</span><span style="color:#91B859;"> -v</span><span style="color:#91B859;"> RS=</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">;</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;"> -v</span><span style="color:#91B859;"> FS=</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">,</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;"> &#39;</span><span style="color:#91B859;">{print $1}</span><span style="color:#39ADB5;">&#39;</span><span style="color:#91B859;"> file.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><strong>ORS</strong> 输出记录分隔符，默认回车</li><li><strong>NF</strong> 字段数量</li><li><strong>NR</strong> 记录的编号</li><li><strong>FNR</strong></li><li><strong>FILENAME</strong></li></ul><h2 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">💡</p><p>数组是awk的灵魂，处理文本中最不能少的就是它的数组处理。因为数组索引（下标）可以是数字和字符串在awk中数组叫做关联数组(associative arrays)。awk 中的数组不必提前声明，也不必声明大小。数组元素用0或空字符串来初始化，这根据上下文而定。</p></div><p><strong>创建一个简单的数组</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#E2931D;">awk</span><span style="color:#39ADB5;"> &#39;</span><span style="color:#91B859;">BEGIN{stu[&quot;name&quot;]=&quot;xiaoming&quot;;stu[&quot;age&quot;]=22;print stu[&quot;name&quot;] &quot; &quot; stu[&quot;age&quot;]}</span><span style="color:#39ADB5;">&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><table tabindex="0"><thead><tr><th>Column1</th><th>Column2</th></tr></thead><tbody><tr><td>删除数组元素</td><td>delete arr[idx]</td></tr><tr><td>删除数组所有元素</td><td>delete arr</td></tr><tr><td>检测是否是数组</td><td>isarray(arr) 可用于检测 arr 是否是数组，如果是数组则返回 1，否则返回 0。typeof(arr) 可返回数据类型，如果 arr 是数组，则其返回”array”。</td></tr><tr><td>元素是否在数组中</td><td>if(arr[&quot;x&quot;] != &quot;&quot;)</td></tr></tbody></table><h2 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h2><p>AWK 函数分为内置函数和自定义函数</p><ul><li>数值处理函数：</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#6182B8;">rand</span><span style="color:#39ADB5;">()</span><span style="color:#90A4AE;"> 返回0和1 之间一个随机数</span></span>
<span class="line"><span style="color:#6182B8;">srand</span><span style="color:#39ADB5;">()</span><span style="color:#6182B8;"> 配合rand</span><span style="color:#39ADB5;">()</span><span style="color:#90A4AE;">函数，生成随机数的种子</span></span>
<span class="line"><span style="color:#6182B8;">int</span><span style="color:#39ADB5;">()</span><span style="color:#90A4AE;"> 返回整数</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>字符串处理函数</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#E2931D;">length([s]</span><span style="color:#90A4AE;">) </span><span style="color:#90A4AE;font-style:italic;"># 返回字符串的长度</span></span>
<span class="line"><span style="color:#E2931D;">sub(r,s,[t]</span><span style="color:#90A4AE;">) </span><span style="color:#90A4AE;font-style:italic;"># 对t字符串搜索r 表示模式匹配的内容并将第一个匹配内容替换为s</span></span>
<span class="line"><span style="color:#E2931D;">gsub(r,s,[t]</span><span style="color:#90A4AE;">) </span><span style="color:#90A4AE;font-style:italic;"># 全部替换</span></span>
<span class="line"><span style="color:#E2931D;">split(s,arr,[r]</span><span style="color:#90A4AE;">) </span><span style="color:#90A4AE;font-style:italic;"># 以r为分隔符，切割字符串s，并将结果保存到arr中</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>自定义函数</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">function</span><span style="color:#6182B8;"> name</span><span style="color:#39ADB5;"> (</span><span style="color:#E2931D;">parm,</span><span style="color:#91B859;"> parm,</span><span style="color:#91B859;"> ...</span><span style="color:#39ADB5;">)</span><span style="color:#39ADB5;"> {</span></span>
<span class="line"><span style="color:#E2931D;">    statments</span></span>
<span class="line"><span style="color:#39ADB5;font-style:italic;">    return</span><span style="color:#91B859;"> expression</span></span>
<span class="line"><span style="color:#39ADB5;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-label="Permalink to &quot;实例&quot;">​</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#90A4AE;font-style:italic;"># 打印第二行，默认{print $0}, $0表示所有列，也就是整行</span></span>
<span class="line"><span style="color:#E2931D;">awk</span><span style="color:#39ADB5;"> &#39;</span><span style="color:#91B859;">NR==2</span><span style="color:#39ADB5;">&#39;</span><span style="color:#91B859;"> file</span></span>
<span class="line"><span style="color:#E2931D;">awk</span><span style="color:#39ADB5;"> &#39;</span><span style="color:#91B859;">NR==2{print $0}</span><span style="color:#39ADB5;">&#39;</span><span style="color:#91B859;"> file</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;"># 打印第三列值大于1000的行</span></span>
<span class="line"><span style="color:#E2931D;">awk</span><span style="color:#91B859;"> -F</span><span style="color:#39ADB5;">&#39;</span><span style="color:#91B859;">:</span><span style="color:#39ADB5;">&#39;</span><span style="color:#39ADB5;"> &#39;</span><span style="color:#91B859;">$3&gt;1000</span><span style="color:#39ADB5;">&#39;</span><span style="color:#91B859;"> file</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;"># 取奇数行</span></span>
<span class="line"><span style="color:#E2931D;">awk</span><span style="color:#39ADB5;"> &#39;</span><span style="color:#91B859;">NR%2==1</span><span style="color:#39ADB5;">&#39;</span><span style="color:#91B859;"> file</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>`,40),p=[t];function o(r,i,c,d,u,b){return n(),a("div",null,p)}const h=s(e,[["render",o]]);export{m as __pageData,h as default};

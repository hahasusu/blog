import{_ as s,c as n,o as a,a4 as l}from"./chunks/framework.GYzjcnJh.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"backend/lua.md","filePath":"backend/lua.md"}'),p={name:"backend/lua.md"},e=l(`<h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><h3 id="table" tabindex="-1">table <a class="header-anchor" href="#table" aria-label="Permalink to &quot;table&quot;">​</a></h3><p>Lua 中的表（table）其实是一个&quot;关联数组&quot;（associative arrays），数组的索引可以是数字、字符串或表类型。</p><p>在 Lua 里，table 的创建是通过&quot;构造表达式&quot;来完成，最简单构造表达式是{}，用来创建一个空表。</p><p>table 索引：<br> 对 table 的索引使用方括号 []。Lua 也提供了 <code>.</code> 操作</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#90A4AE;">t[i]</span></span>
<span class="line"><span style="color:#90A4AE;">t.</span><span style="color:#E2931D;">i</span><span style="color:#90A4AE;font-style:italic;">                 -- 当索引为字符串类型时的一种简化写法</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="string" tabindex="-1">string <a class="header-anchor" href="#string" aria-label="Permalink to &quot;string&quot;">​</a></h3><p>字符串由一对双引号或单引号来表示。</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#90A4AE;font-style:italic;"># 字符串拼接</span></span>
<span class="line"><span style="color:#6182B8;">print</span><span style="color:#90A4AE;">(</span><span style="color:#E2931D;">&quot;www.runoob.&quot;</span><span style="color:#6182B8;">..</span><span style="color:#E2931D;">&quot;com&quot;</span><span style="color:#90A4AE;">)   </span><span style="color:#90A4AE;font-style:italic;"># www.runoob.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="function" tabindex="-1">function <a class="header-anchor" href="#function" aria-label="Permalink to &quot;function&quot;">​</a></h3><p>在 Lua 中，函数是被看作是&quot;第一类值（First-Class Value）&quot;，函数可以存在变量里:</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#90A4AE;font-style:italic;">-- 声明方式一</span></span>
<span class="line"><span style="color:#90A4AE;">[</span><span style="color:#39ADB5;">local</span><span style="color:#90A4AE;">] </span><span style="color:#39ADB5;font-style:italic;">function</span><span style="color:#6182B8;"> func1</span><span style="color:#39ADB5;">()</span></span>
<span class="line"><span style="color:#6182B8;">    print</span><span style="color:#90A4AE;">(</span><span style="color:#39ADB5;">&#39;</span><span style="color:#91B859;">Hello world!</span><span style="color:#39ADB5;">&#39;</span><span style="color:#90A4AE;">)</span></span>
<span class="line"><span style="color:#39ADB5;font-style:italic;">end</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">-- 声明方式二</span></span>
<span class="line"><span style="color:#90A4AE;">[</span><span style="color:#39ADB5;">local</span><span style="color:#90A4AE;">] </span><span style="color:#6182B8;">func1</span><span style="color:#39ADB5;"> =</span><span style="color:#39ADB5;font-style:italic;"> function</span><span style="color:#39ADB5;">()</span></span>
<span class="line"><span style="color:#6182B8;">    print</span><span style="color:#90A4AE;">(</span><span style="color:#39ADB5;">&#39;</span><span style="color:#91B859;">Hello world!</span><span style="color:#39ADB5;">&#39;</span><span style="color:#90A4AE;">)</span></span>
<span class="line"><span style="color:#39ADB5;font-style:italic;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h2><p>在 Lua 中，数组不是一种特定的数据类型，而是一种用来存储一组值的数据结构。</p><p>实际上，Lua 中并没有专门的数组类型，而是使用一种被称为 &quot;table&quot; 的数据结构来实现数组的功能。</p><p>索引默认从 1 开始</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#90A4AE;font-style:italic;"># 创建一个数组</span></span>
<span class="line"><span style="color:#9C3EDA;">local</span><span style="color:#90A4AE;"> myArray = </span><span style="color:#39ADB5;">{</span><span style="color:#E2931D;">10,</span><span style="color:#91B859;"> 20,</span><span style="color:#91B859;"> 30,</span><span style="color:#91B859;"> 40,</span><span style="color:#F76D47;"> 50</span><span style="color:#91B859;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;"># 计算数组长度</span></span>
<span class="line"><span style="color:#9C3EDA;">local</span><span style="color:#90A4AE;"> length = </span><span style="color:#90A4AE;font-style:italic;">#myArray</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;"># -- 添加新元素到数组末尾</span></span>
<span class="line"><span style="color:#E2931D;">myArray[#myArray</span><span style="color:#91B859;"> +</span><span style="color:#91B859;"> 1]</span><span style="color:#91B859;"> =</span><span style="color:#F76D47;"> 60</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="模块和包" tabindex="-1">模块和包 <a class="header-anchor" href="#模块和包" aria-label="Permalink to &quot;模块和包&quot;">​</a></h2><p>从 Lua 5.1 开始，Lua 加入了标准的模块管理机制，可以把一些公用的代码放在一个文件里，<br> 以 API 接口的形式在其他地方调用，有利于代码的重用和降低代码耦合度。</p><p>Lua 的模块是由变量、函数等已知元素组成的 table，因此创建一个模块很简单，就是创建一个 table, 然后把需要导出的常量、函数放入其中，最后返回这个 table 就行</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#90A4AE;font-style:italic;">-- 文件名为 module.lua</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">-- 定义一个名为 module 的模块</span></span>
<span class="line"><span style="color:#90A4AE;">module </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">-- 定义一个常量</span></span>
<span class="line"><span style="color:#6182B8;">module</span><span style="color:#90A4AE;">.</span><span style="color:#E2931D;">constant</span><span style="color:#39ADB5;"> =</span><span style="color:#39ADB5;"> &quot;</span><span style="color:#91B859;">这是一个常量</span><span style="color:#39ADB5;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">-- 定义一个函数</span></span>
<span class="line"><span style="color:#39ADB5;font-style:italic;">function</span><span style="color:#6182B8;"> module</span><span style="color:#90A4AE;">.</span><span style="color:#6182B8;">func1</span><span style="color:#39ADB5;">()</span></span>
<span class="line"><span style="color:#6182B8;">    io.write</span><span style="color:#90A4AE;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">这是一个公有函数！</span><span style="color:#90A4AE;">\\n</span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;">)</span></span>
<span class="line"><span style="color:#39ADB5;font-style:italic;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#39ADB5;">local</span><span style="color:#39ADB5;font-style:italic;"> function</span><span style="color:#6182B8;"> func2</span><span style="color:#39ADB5;">()</span></span>
<span class="line"><span style="color:#6182B8;">    print</span><span style="color:#90A4AE;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">这是一个私有函数！</span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;">)</span></span>
<span class="line"><span style="color:#39ADB5;font-style:italic;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#39ADB5;font-style:italic;">function</span><span style="color:#6182B8;"> module</span><span style="color:#90A4AE;">.</span><span style="color:#6182B8;">func3</span><span style="color:#39ADB5;">()</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">    -- func2是一个私有函数，因此是不能从外部访问模块里的这个私有函数，必须通过模块里的公有函数来调用.</span></span>
<span class="line"><span style="color:#6182B8;">    func2</span><span style="color:#90A4AE;">()</span></span>
<span class="line"><span style="color:#39ADB5;font-style:italic;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#39ADB5;font-style:italic;">return</span><span style="color:#6182B8;"> module</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="加载模块" tabindex="-1">加载模块 <a class="header-anchor" href="#加载模块" aria-label="Permalink to &quot;加载模块&quot;">​</a></h3><p>Lua提供了一个名为require的函数用来加载模块。要加载一个模块，只需要简单地调用就可以了</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#90A4AE;font-style:italic;">-- 模块名是文件名，不必是return 的变量</span></span>
<span class="line"><span style="color:#6182B8;">require</span><span style="color:#90A4AE;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">&lt;模块名&gt;</span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;">)</span></span>
<span class="line"><span style="color:#6182B8;">require</span><span style="color:#39ADB5;"> &quot;</span><span style="color:#91B859;">&lt;模块名&gt;</span><span style="color:#39ADB5;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6182B8;">require</span><span style="color:#90A4AE;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">module</span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;">)</span></span>
<span class="line"><span style="color:#6182B8;">print</span><span style="color:#90A4AE;">(</span><span style="color:#6182B8;">module</span><span style="color:#90A4AE;">.</span><span style="color:#E2931D;">constant</span><span style="color:#90A4AE;">)</span></span>
<span class="line"><span style="color:#6182B8;">module</span><span style="color:#90A4AE;">.</span><span style="color:#6182B8;">func3</span><span style="color:#90A4AE;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">-- 或者给加载的模块定义一个别名变量，方便调用</span></span>
<span class="line"><span style="color:#39ADB5;">local</span><span style="color:#90A4AE;"> m </span><span style="color:#39ADB5;">=</span><span style="color:#6182B8;"> require</span><span style="color:#90A4AE;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">module</span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6182B8;">print</span><span style="color:#90A4AE;">(m.</span><span style="color:#E2931D;">constant</span><span style="color:#90A4AE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">m.</span><span style="color:#6182B8;">func3</span><span style="color:#90A4AE;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="模块加载机制" tabindex="-1">模块加载机制 <a class="header-anchor" href="#模块加载机制" aria-label="Permalink to &quot;模块加载机制&quot;">​</a></h3><p>对于自定义的模块，模块文件不是放在哪个文件目录都行，函数 require 有它自己的文件路径加载策略，它会尝试从 Lua 文件或 C 程序库中加载模块。</p><p>require 用于搜索 Lua 文件的路径是存放在全局变量 package.path 中，当 Lua 启动后， 会以环境变量 LUA_PATH 的值来初始这个环境变量。如果没有找到该环境变量，则使用一个编译时定义的默认路径来初始化。</p><p>如果没有 LUA_PATH 这个环境变量，也可以自定义设置, 编辑.bashrc文件</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#90A4AE;font-style:italic;"># 文件路径以 &quot;;&quot; 号分隔，最后的 2 个 &quot;;;&quot; 表示新加的路径添加到原来的默认路径之前</span></span>
<span class="line"><span style="color:#9C3EDA;">export</span><span style="color:#90A4AE;"> LUA_PATH</span><span style="color:#39ADB5;">=</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">~/lua/?.lua;;</span><span style="color:#39ADB5;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,29),o=[e];function t(r,c,i,u,y,b){return a(),n("div",null,o)}const m=s(p,[["render",t]]);export{d as __pageData,m as default};

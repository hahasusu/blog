import{_ as s,c as n,o as a,a4 as l}from"./chunks/framework.GYzjcnJh.js";const E=JSON.parse('{"title":"数据类型","description":"","frontmatter":{"date":"2024-03-01 08:44:41"},"headers":[],"relativePath":"front/js/types.md","filePath":"front/js/types.md"}'),p={name:"front/js/types.md"},o=l(`<h1 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h1><p><code>JavaScript</code> 中的数据类型分为基本数据类型和引用数据类型</p><h2 id="基本类型" tabindex="-1">基本类型 <a class="header-anchor" href="#基本类型" aria-label="Permalink to &quot;基本类型&quot;">​</a></h2><blockquote><p>基本数据类型也可以叫原始数据类型</p></blockquote><p>在 ES2020 标准下的 JavaScript 一共有以下 7 种基本类型</p><ul><li>undefined 未定义</li><li>null 空指针</li><li>boolean 布尔值</li><li>string 字符串</li><li>number 数值</li><li>symbol 独一无二的值 (ES6 引入)</li><li>bigint 大整数 (ES2020 引入)</li></ul><div class="tip custom-block"><p class="custom-block-title"><strong>基本类型总结</strong></p><ul><li>基本类型仅保存原始值，不存在属性和方法</li><li>基本类型存储在 栈内存 中</li><li>保存基本类型的变量是 按值 (by value) 访问 的，操作的就是存储在变量中的实际值</li><li>复制基本类型时会创建该值的第二个副本 (独立使用，互不干扰)</li></ul></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#90A4AE;font-style:italic;">// </span></span>
<span class="line"><span style="color:#9C3EDA;">const</span><span style="color:#90A4AE;"> str </span><span style="color:#39ADB5;">=</span><span style="color:#39ADB5;"> &#39;</span><span style="color:#91B859;">hello world</span><span style="color:#39ADB5;">&#39;</span></span>
<span class="line"><span style="color:#90A4AE;">str</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">toString</span><span style="color:#90A4AE;">()</span></span>
<span class="line"><span style="color:#90A4AE;">str</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">length</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;"> * 在执行上面的代码时 \`JavaScript\` 都会执行以下 3 步</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;"> * 1. 创建一个 String 类型的实例</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;"> * 2. 调用实例上的特定方法或属性</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;"> * 3. 销毁刚刚创建的实例</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#9C3EDA;">const</span><span style="color:#90A4AE;"> str </span><span style="color:#39ADB5;">=</span><span style="color:#39ADB5;"> &#39;</span><span style="color:#91B859;">hello world</span><span style="color:#39ADB5;">&#39;</span></span>
<span class="line"><span style="color:#39ADB5;">new</span><span style="color:#6182B8;"> String</span><span style="color:#90A4AE;">(str)</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">toString</span><span style="color:#90A4AE;">()</span></span>
<span class="line"><span style="color:#39ADB5;">new</span><span style="color:#6182B8;"> String</span><span style="color:#90A4AE;">(str)</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">length</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="引用类型" tabindex="-1">引用类型 <a class="header-anchor" href="#引用类型" aria-label="Permalink to &quot;引用类型&quot;">​</a></h2><p>在 JavaScript 中除了基本类型，其他的都是引用类型，常见的引用类型如下</p><ul><li>Object 对象</li><li>Array 数组</li><li>Function 函数</li><li>Date 日期与时间</li><li>RegExp 正则表达式</li><li>Set 类似于数组但成员的值都是唯一的 (ES6 引入)</li><li>WeakSet (ES6 引入)</li><li>Map 类似于对象也是键值对的集合 (ES6 引入)</li><li>WeakMap (ES6 引入)</li></ul><div class="tip custom-block"><p class="custom-block-title"><strong>引用类型总结</strong></p><ul><li>因为 JavaScript 不允许直接访问内存位置(不能直接操作对象所在的内存空间)，所以引用类型在 栈内存 中存储的是地址(内存指针)，而引用类型中的数据(方法或属性)是存储在 堆内存 中</li><li>保存引用类型的变量是 按引用 (by reference) 访问 ，实际上操作的是对该对象的引用而非实际的对象本身</li><li>复制引用类型时只会复制内存指针</li></ul></div><div class="tip custom-block"><p class="custom-block-title"><strong>栈内存和堆内存</strong></p><p>栈内存</p><ul><li>存储基本数据类型和堆内存地址</li><li>是连续的内存空间</li></ul><p>堆内存</p><ul><li>存储引用数据类型和闭包中的变量</li><li>不是连续的内存空间</li></ul></div><h2 id="类型判断" tabindex="-1">类型判断 <a class="header-anchor" href="#类型判断" aria-label="Permalink to &quot;类型判断&quot;">​</a></h2><p>常见的五种判断方式</p><ul><li>typeof</li><li>instanceof</li><li>constructor</li><li>Array.isArray()</li><li>Object.prototype.toString</li></ul><h3 id="typeof" tabindex="-1">typeof <a class="header-anchor" href="#typeof" aria-label="Permalink to &quot;typeof&quot;">​</a></h3><p>除 null 外的基本类型都能准确判断</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#39ADB5;">typeof</span><span style="color:#39ADB5;"> undefined</span><span style="color:#90A4AE;font-style:italic;">        // &#39;undefined&#39;</span></span>
<span class="line"><span style="color:#39ADB5;">typeof</span><span style="color:#39ADB5;"> null</span><span style="color:#90A4AE;font-style:italic;">             // &#39;object&#39;</span></span>
<span class="line"><span style="color:#39ADB5;">typeof</span><span style="color:#FF5370;"> true</span><span style="color:#90A4AE;font-style:italic;">             // &#39;boolean&#39;</span></span>
<span class="line"><span style="color:#39ADB5;">typeof</span><span style="color:#39ADB5;"> &#39;</span><span style="color:#91B859;">maomao</span><span style="color:#39ADB5;">&#39;</span><span style="color:#90A4AE;font-style:italic;">         // &#39;string&#39;</span></span>
<span class="line"><span style="color:#39ADB5;">typeof</span><span style="color:#F76D47;"> 2021</span><span style="color:#90A4AE;font-style:italic;">             // &#39;number&#39;</span></span>
<span class="line"><span style="color:#39ADB5;">typeof</span><span style="color:#6182B8;"> Symbol</span><span style="color:#90A4AE;">()         </span><span style="color:#90A4AE;font-style:italic;">// &#39;symbol&#39;</span></span>
<span class="line"><span style="color:#39ADB5;">typeof</span><span style="color:#6182B8;"> BigInt</span><span style="color:#90A4AE;">(</span><span style="color:#F76D47;">2021</span><span style="color:#90A4AE;">)     </span><span style="color:#90A4AE;font-style:italic;">// &#39;bigint&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">为什么 typeof null === &#39;object&#39;</p><p>在 JavaScript 最初的实现中，JavaScript 中的值是由一个表示类型的标签和实际数据值表示的。对象的类型标签是 0。由于 null 代表的是空指针（大多数平台下值为 0x00），因此null 的类型标签是 0，typeof null 也因此返回 &quot;object&quot; —— MDN</p></div><p><strong>除 function 外的引用类型均返回 object</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#39ADB5;">typeof</span><span style="color:#39ADB5;"> {}</span><span style="color:#90A4AE;font-style:italic;">               // &#39;object&#39;</span></span>
<span class="line"><span style="color:#39ADB5;">typeof</span><span style="color:#90A4AE;"> []               </span><span style="color:#90A4AE;font-style:italic;">// &#39;object&#39;</span></span>
<span class="line"><span style="color:#39ADB5;">typeof</span><span style="color:#90A4AE;"> console</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">log      </span><span style="color:#90A4AE;font-style:italic;">// &#39;function&#39;</span></span>
<span class="line"><span style="color:#39ADB5;">typeof</span><span style="color:#39ADB5;"> new</span><span style="color:#6182B8;"> Date</span><span style="color:#90A4AE;">()       </span><span style="color:#90A4AE;font-style:italic;">// &#39;object&#39;</span></span>
<span class="line"><span style="color:#39ADB5;">typeof</span><span style="color:#39ADB5;"> new</span><span style="color:#6182B8;"> RegExp</span><span style="color:#90A4AE;">()     </span><span style="color:#90A4AE;font-style:italic;">// &#39;object&#39;</span></span>
<span class="line"><span style="color:#39ADB5;">typeof</span><span style="color:#39ADB5;"> new</span><span style="color:#6182B8;"> Set</span><span style="color:#90A4AE;">()        </span><span style="color:#90A4AE;font-style:italic;">// &#39;object&#39;</span></span>
<span class="line"><span style="color:#39ADB5;">typeof</span><span style="color:#39ADB5;"> new</span><span style="color:#6182B8;"> WeakSet</span><span style="color:#90A4AE;">()    </span><span style="color:#90A4AE;font-style:italic;">// &#39;object&#39;</span></span>
<span class="line"><span style="color:#39ADB5;">typeof</span><span style="color:#39ADB5;"> new</span><span style="color:#6182B8;"> Map</span><span style="color:#90A4AE;">()        </span><span style="color:#90A4AE;font-style:italic;">// &#39;object&#39;</span></span>
<span class="line"><span style="color:#39ADB5;">typeof</span><span style="color:#39ADB5;"> new</span><span style="color:#6182B8;"> WeakMap</span><span style="color:#90A4AE;">()    </span><span style="color:#90A4AE;font-style:italic;">// &#39;object&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="instanceof" tabindex="-1">instanceof <a class="header-anchor" href="#instanceof" aria-label="Permalink to &quot;instanceof&quot;">​</a></h3><p>instanceof 用于检测构造函数的 prototype 属性是否存在于实例对象的原型链上</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#90A4AE;font-style:italic;">/** 基本类型 */</span></span>
<span class="line"><span style="color:#FF5370;">true</span><span style="color:#39ADB5;"> instanceof</span><span style="color:#E2931D;"> Boolean</span><span style="color:#90A4AE;font-style:italic;">       // false</span></span>
<span class="line"><span style="color:#39ADB5;">&#39;</span><span style="color:#91B859;">maomao</span><span style="color:#39ADB5;">&#39;</span><span style="color:#39ADB5;"> instanceof</span><span style="color:#E2931D;"> String</span><span style="color:#90A4AE;font-style:italic;">    // false</span></span>
<span class="line"><span style="color:#F76D47;">1</span><span style="color:#39ADB5;"> instanceof</span><span style="color:#E2931D;"> Number</span><span style="color:#90A4AE;font-style:italic;">           // false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">/** 引用类型 */</span></span>
<span class="line"><span style="color:#9C3EDA;">function</span><span style="color:#6182B8;"> Person</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;font-style:italic;">name</span><span style="color:#39ADB5;">)</span><span style="color:#39ADB5;"> {</span></span>
<span class="line"><span style="color:#39ADB5;">  this.</span><span style="color:#90A4AE;">name</span><span style="color:#39ADB5;"> =</span><span style="color:#90A4AE;"> name</span></span>
<span class="line"><span style="color:#39ADB5;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9C3EDA;">const</span><span style="color:#90A4AE;"> p1 </span><span style="color:#39ADB5;">=</span><span style="color:#39ADB5;"> new</span><span style="color:#6182B8;"> Person</span><span style="color:#90A4AE;">(</span><span style="color:#39ADB5;">&#39;</span><span style="color:#91B859;">maomao</span><span style="color:#39ADB5;">&#39;</span><span style="color:#90A4AE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">p1 </span><span style="color:#39ADB5;">instanceof</span><span style="color:#E2931D;"> Person</span><span style="color:#90A4AE;font-style:italic;">          // true</span></span>
<span class="line"><span style="color:#90A4AE;">p1 </span><span style="color:#39ADB5;">instanceof</span><span style="color:#E2931D;"> Object</span><span style="color:#90A4AE;font-style:italic;">          // true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">// 修改原型，使 p1 不再是 Person 的实例</span></span>
<span class="line"><span style="color:#90A4AE;">Reflect</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">setPrototypeOf</span><span style="color:#90A4AE;">(p1</span><span style="color:#39ADB5;">,</span><span style="color:#E2931D;"> Array</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">prototype)</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">// OR p1.__proto__ = Array.prototype</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">p1 </span><span style="color:#39ADB5;">instanceof</span><span style="color:#E2931D;"> Person</span><span style="color:#90A4AE;font-style:italic;">          // false</span></span>
<span class="line"><span style="color:#90A4AE;">p1 </span><span style="color:#39ADB5;">instanceof</span><span style="color:#E2931D;"> Array</span><span style="color:#90A4AE;font-style:italic;">           // true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><div class="tip custom-block"><p class="custom-block-title"><strong>instanceof 总结</strong></p><ul><li>instanceof 不能判断基本类型，对于引用类型只能判断原型链上的从属关系</li><li>instanceof 并不完全可靠，因为构造函数的 prototype 属性可能会被修改</li></ul><p>修改原型的方法</p><ul><li>使用 ES6 提供的 Reflect.setPrototypeOf() 方法</li><li>借助于非标准的 <strong>proto</strong> 伪属性</li></ul></div><h3 id="constructor" tabindex="-1">constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;constructor&quot;">​</a></h3><p>实例对象可以通过 constructor 属性去访问它的构造函数</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#90A4AE;font-style:italic;">/** 基本类型 */</span></span>
<span class="line"><span style="color:#90A4AE;">(</span><span style="color:#FF5370;">true</span><span style="color:#90A4AE;">)</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">constructor </span><span style="color:#39ADB5;">===</span><span style="color:#90A4AE;"> Boolean            </span><span style="color:#90A4AE;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#39ADB5;">&#39;</span><span style="color:#91B859;">maomao</span><span style="color:#39ADB5;">&#39;</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">constructor </span><span style="color:#39ADB5;">===</span><span style="color:#90A4AE;"> String           </span><span style="color:#90A4AE;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#90A4AE;">(</span><span style="color:#F76D47;">2021</span><span style="color:#90A4AE;">)</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">constructor </span><span style="color:#39ADB5;">===</span><span style="color:#90A4AE;"> Number             </span><span style="color:#90A4AE;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#6182B8;">Symbol</span><span style="color:#90A4AE;">()</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">constructor </span><span style="color:#39ADB5;">===</span><span style="color:#90A4AE;"> Symbol           </span><span style="color:#90A4AE;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#6182B8;">BigInt</span><span style="color:#90A4AE;">(</span><span style="color:#F76D47;">2021</span><span style="color:#90A4AE;">)</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">constructor </span><span style="color:#39ADB5;">===</span><span style="color:#90A4AE;"> BigInt       </span><span style="color:#90A4AE;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">/** 引用类型 */</span></span>
<span class="line"><span style="color:#90A4AE;">(</span><span style="color:#39ADB5;">{}</span><span style="color:#90A4AE;">)</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">constructor </span><span style="color:#39ADB5;">===</span><span style="color:#90A4AE;"> Object               </span><span style="color:#90A4AE;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#90A4AE;">([])</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">constructor </span><span style="color:#39ADB5;">===</span><span style="color:#90A4AE;"> Array                </span><span style="color:#90A4AE;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9C3EDA;">function</span><span style="color:#6182B8;"> Person</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;font-style:italic;">name</span><span style="color:#39ADB5;">)</span><span style="color:#39ADB5;"> {</span></span>
<span class="line"><span style="color:#39ADB5;">  this.</span><span style="color:#90A4AE;">name</span><span style="color:#39ADB5;"> =</span><span style="color:#90A4AE;"> name</span></span>
<span class="line"><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#E2931D;">Person</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">prototype</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">constructor </span><span style="color:#39ADB5;">===</span><span style="color:#90A4AE;"> Person   </span><span style="color:#90A4AE;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">// 修改原型造成 constructor 丢失</span></span>
<span class="line"><span style="color:#E2931D;">Person</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">prototype </span><span style="color:#39ADB5;">=</span><span style="color:#39ADB5;"> {}</span></span>
<span class="line"><span style="color:#E2931D;">Person</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">prototype</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">constructor </span><span style="color:#39ADB5;">===</span><span style="color:#90A4AE;"> Object   </span><span style="color:#90A4AE;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><div class="tip custom-block"><p class="custom-block-title"><strong>constructor 总结</strong></p><ul><li>constructor 可以判断除 undefined 和 null 外的所有基本类型和引用类型(undefined 和 null 不存在构造函数)</li><li>constructor 并不完全可靠，因为构造函数的 prototype 属性可能会被修改，从而造成 constructor 属性指向不准确</li></ul></div><h3 id="array-isarray" tabindex="-1">Array.isArray() <a class="header-anchor" href="#array-isarray" aria-label="Permalink to &quot;Array.isArray()&quot;">​</a></h3><p>Array.isArray() 用于判断一个值是否是数组 (Array)</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#90A4AE;">Array</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">isArray</span><span style="color:#90A4AE;">([])   </span><span style="color:#90A4AE;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#90A4AE;">Array</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">isArray</span><span style="color:#90A4AE;">(</span><span style="color:#39ADB5;">{}</span><span style="color:#90A4AE;">)   </span><span style="color:#90A4AE;font-style:italic;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="object-prototype-tostring" tabindex="-1">Object.prototype.toString <a class="header-anchor" href="#object-prototype-tostring" aria-label="Permalink to &quot;Object.prototype.toString&quot;">​</a></h3><ul><li>每个对象都有一个 toString() 方法，当该对象被表示为一个文本值时，或者一个对象以预期的字符串方式引用时自动调用，默认情况下 toString() 方法被每个 Object 对象继承。如果此方法在自定义对象中未被覆盖 toString() 返回 &quot;[object type]&quot; 其中 type 是对象的类型</li><li>为了每个对象都能通过 Object.prototype.toString() 来检测，需要以 Function.prototype.call() 或者 Function.prototype.apply() 的形式来调用</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">const</span><span style="color:#90A4AE;"> toString </span><span style="color:#39ADB5;">=</span><span style="color:#E2931D;"> Object</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">prototype</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">toString</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">toString</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">call</span><span style="color:#90A4AE;">(</span><span style="color:#39ADB5;">undefined</span><span style="color:#90A4AE;">)        </span><span style="color:#90A4AE;font-style:italic;">// &#39;[object Undefined]&#39;</span></span>
<span class="line"><span style="color:#90A4AE;">toString</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">call</span><span style="color:#90A4AE;">(</span><span style="color:#39ADB5;">null</span><span style="color:#90A4AE;">)             </span><span style="color:#90A4AE;font-style:italic;">// &#39;[object Null]&#39;</span></span>
<span class="line"><span style="color:#90A4AE;">toString</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">call</span><span style="color:#90A4AE;">(</span><span style="color:#FF5370;">true</span><span style="color:#90A4AE;">)             </span><span style="color:#90A4AE;font-style:italic;">// &#39;[object Boolean]&#39;</span></span>
<span class="line"><span style="color:#90A4AE;">toString</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">call</span><span style="color:#90A4AE;">(</span><span style="color:#39ADB5;">&#39;</span><span style="color:#91B859;">maomao</span><span style="color:#39ADB5;">&#39;</span><span style="color:#90A4AE;">)         </span><span style="color:#90A4AE;font-style:italic;">// &#39;[object String]&#39;</span></span>
<span class="line"><span style="color:#90A4AE;">toString</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">call</span><span style="color:#90A4AE;">(</span><span style="color:#F76D47;">2021</span><span style="color:#90A4AE;">)             </span><span style="color:#90A4AE;font-style:italic;">// &#39;[object Number]&#39;</span></span>
<span class="line"><span style="color:#90A4AE;">toString</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">call</span><span style="color:#90A4AE;">(</span><span style="color:#6182B8;">Symbol</span><span style="color:#90A4AE;">())         </span><span style="color:#90A4AE;font-style:italic;">// &#39;[object Symbol]&#39;</span></span>
<span class="line"><span style="color:#90A4AE;">toString</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">call</span><span style="color:#90A4AE;">(</span><span style="color:#6182B8;">BigInt</span><span style="color:#90A4AE;">(</span><span style="color:#F76D47;">2021</span><span style="color:#90A4AE;">))     </span><span style="color:#90A4AE;font-style:italic;">// &#39;[object BigInt]&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">toString</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">call</span><span style="color:#90A4AE;">(</span><span style="color:#39ADB5;">{}</span><span style="color:#90A4AE;">)               </span><span style="color:#90A4AE;font-style:italic;">// &#39;[object Object]&#39;</span></span>
<span class="line"><span style="color:#90A4AE;">toString</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">call</span><span style="color:#90A4AE;">([])               </span><span style="color:#90A4AE;font-style:italic;">// &#39;[object Array]&#39;</span></span>
<span class="line"><span style="color:#90A4AE;">toString</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">call</span><span style="color:#90A4AE;">(console</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">log)      </span><span style="color:#90A4AE;font-style:italic;">// &#39;[object Function]&#39;</span></span>
<span class="line"><span style="color:#90A4AE;">toString</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">call</span><span style="color:#90A4AE;">(</span><span style="color:#39ADB5;">new</span><span style="color:#6182B8;"> Date</span><span style="color:#90A4AE;">())       </span><span style="color:#90A4AE;font-style:italic;">// &#39;[object Date]&#39;</span></span>
<span class="line"><span style="color:#90A4AE;">toString</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">call</span><span style="color:#90A4AE;">(</span><span style="color:#39ADB5;">new</span><span style="color:#6182B8;"> RegExp</span><span style="color:#90A4AE;">())     </span><span style="color:#90A4AE;font-style:italic;">// &#39;[object RegExp]&#39;</span></span>
<span class="line"><span style="color:#90A4AE;">toString</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">call</span><span style="color:#90A4AE;">(</span><span style="color:#39ADB5;">new</span><span style="color:#6182B8;"> Set</span><span style="color:#90A4AE;">())        </span><span style="color:#90A4AE;font-style:italic;">// &#39;[object Set]&#39;</span></span>
<span class="line"><span style="color:#90A4AE;">toString</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">call</span><span style="color:#90A4AE;">(</span><span style="color:#39ADB5;">new</span><span style="color:#6182B8;"> WeakSet</span><span style="color:#90A4AE;">())    </span><span style="color:#90A4AE;font-style:italic;">// &#39;[object WeakSet]&#39;</span></span>
<span class="line"><span style="color:#90A4AE;">toString</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">call</span><span style="color:#90A4AE;">(</span><span style="color:#39ADB5;">new</span><span style="color:#6182B8;"> Map</span><span style="color:#90A4AE;">())        </span><span style="color:#90A4AE;font-style:italic;">// &#39;[object Map]&#39;</span></span>
<span class="line"><span style="color:#90A4AE;">toString</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">call</span><span style="color:#90A4AE;">(</span><span style="color:#39ADB5;">new</span><span style="color:#6182B8;"> WeakMap</span><span style="color:#90A4AE;">())    </span><span style="color:#90A4AE;font-style:italic;">// &#39;[object WeakMap]&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div>`,36),e=[o];function t(c,r,i,y,A,b){return a(),n("div",null,e)}const B=s(p,[["render",t]]);export{E as __pageData,B as default};

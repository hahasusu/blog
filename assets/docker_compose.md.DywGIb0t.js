import{_ as s,c as n,o as a,a4 as e}from"./chunks/framework.GYzjcnJh.js";const u=JSON.parse('{"title":"Volumes","description":"","frontmatter":{"date":"2024-02-28 17:24:57"},"headers":[],"relativePath":"docker/compose.md","filePath":"backend/docker/compose.md"}'),l={name:"docker/compose.md"},p=e(`<h2 id="docker-compose" tabindex="-1">docker-compose <a class="header-anchor" href="#docker-compose" aria-label="Permalink to &quot;docker-compose&quot;">​</a></h2><blockquote><p>Docker Compose 是一个用于定义和运行多容器应用程序的工具</p></blockquote><blockquote><p>使用单个命令，可以从配置文件创建并启动所有服务</p></blockquote><p>文档： <a href="https://docs.docker.com/compose/" target="_blank" rel="noreferrer">https://docs.docker.com/compose/</a></p><ul><li><p><code>Docker Compose</code> 命令行二进制文件的第一版于 2014 年首次发布。它是用 Python 编写的，并通过 <code>docker-compose</code> 调用。通常，Compose V1 项目在 <code>compose.yml</code> 文件中包含顶级 <code>version</code> 元素，其值范围为 <code>2.0</code> 到 <code>3.8</code></p></li><li><p><code>Docker Compose</code> 命令行二进制文件的第二版于 2020 年发布，用 Go 编写，并通过 <code>docker compose</code> 调用。 Compose V2 忽略 <code>compose.yml</code> 文件中的 <code>version</code> 顶级元素。</p></li></ul><h2 id="安装-compose插件" tabindex="-1">安装 Compose插件 <a class="header-anchor" href="#安装-compose插件" aria-label="Permalink to &quot;安装 Compose插件&quot;">​</a></h2><p>如果您已经安装了 Docker Engine 和 Docker CLI，则可以通过以下任一方式从命令行安装 Compose 插件</p><ol><li><a href="https://docs.docker.com/compose/install/linux/#install-using-the-repository" target="_blank" rel="noreferrer">使用 Docker 的存储库</a></li><li><a href="https://docs.docker.com/compose/install/linux/#install-the-plugin-manually" target="_blank" rel="noreferrer">手动下载并安装</a></li></ol><p><strong>仓库</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#E2931D;">apt</span><span style="color:#91B859;"> install</span><span style="color:#91B859;"> docker-compose-plugin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E2931D;">sudo</span><span style="color:#91B859;"> yum</span><span style="color:#91B859;"> install</span><span style="color:#91B859;"> -y</span><span style="color:#91B859;"> yum-utils</span></span>
<span class="line"><span style="color:#E2931D;">sudo</span><span style="color:#91B859;"> yum-config-manager</span><span style="color:#91B859;"> --add-repo</span><span style="color:#91B859;"> https://download.docker.com/linux/centos/docker-ce.repo</span></span>
<span class="line"><span style="color:#E2931D;">dnf</span><span style="color:#91B859;"> install</span><span style="color:#91B859;"> docker-compose-plugin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E2931D;">docker</span><span style="color:#91B859;"> compose</span><span style="color:#91B859;"> version</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>手动安装</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#90A4AE;">DOCKER_CONFIG</span><span style="color:#39ADB5;">=\${</span><span style="color:#90A4AE;">DOCKER_CONFIG</span><span style="color:#39ADB5;">:-</span><span style="color:#90A4AE;">$HOME</span><span style="color:#39ADB5;">/</span><span style="color:#90A4AE;">.docker</span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#E2931D;"> mkdir</span><span style="color:#91B859;"> -p</span><span style="color:#90A4AE;"> $DOCKER_CONFIG</span><span style="color:#91B859;">/cli-plugins</span></span>
<span class="line"><span style="color:#E2931D;">curl</span><span style="color:#91B859;"> -SL</span><span style="color:#91B859;"> https://github.com/docker/compose/releases/download/v2.26.0/docker-compose-linux-x86_64</span><span style="color:#91B859;"> -o</span><span style="color:#90A4AE;"> $DOCKER_CONFIG</span><span style="color:#91B859;">/cli-plugins/docker-compose</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E2931D;">chmod</span><span style="color:#91B859;"> +x</span><span style="color:#90A4AE;"> $DOCKER_CONFIG</span><span style="color:#91B859;">/cli-plugins/docker-compose</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="独立安装-compose" tabindex="-1">独立安装 Compose <a class="header-anchor" href="#独立安装-compose" aria-label="Permalink to &quot;独立安装 Compose&quot;">​</a></h2><p><strong>不建议使用此安装方案，仅出于向后兼容目的才支持此安装方案。</strong></p><h2 id="环境变量" tabindex="-1">环境变量 <a class="header-anchor" href="#环境变量" aria-label="Permalink to &quot;环境变量&quot;">​</a></h2><blockquote><p>使用环境变量在运行时将配置信息传递给容器。</p></blockquote><p>使用 Compose，您可以通过多种方式在容器中设置环境变量。您可以使用 Compose 文件或 CLI。</p><p>要使用环境变量将敏感信息（例如密码）传递到容器中。使用<code>secrets</code>来代替</p><h3 id="env-文件" tabindex="-1"><code>.env</code> 文件 <a class="header-anchor" href="#env-文件" aria-label="Permalink to &quot;\`.env\` 文件&quot;">​</a></h3><p><strong>示例</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#E2931D;">cat</span><span style="color:#91B859;"> .env</span></span>
<span class="line"><span style="color:#90A4AE;">TAG</span><span style="color:#39ADB5;">=</span><span style="color:#91B859;">v1.20.0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E2931D;">cat</span><span style="color:#91B859;"> compose.yml</span></span>
<span class="line"><span style="color:#E2931D;">services:</span></span>
<span class="line"><span style="color:#E2931D;">  web:</span></span>
<span class="line"><span style="color:#E2931D;">    image:</span><span style="color:#39ADB5;"> &quot;</span><span style="color:#91B859;">nginx:</span><span style="color:#39ADB5;">\${</span><span style="color:#90A4AE;">TAG</span><span style="color:#39ADB5;">}&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>docker compose config</code> 验证</p><p>从 Docker Compose 版本 2.24.0 开始，您可以使用 <code>env_file</code> 属性将 <code>.env</code> 文件设置为可选。当 <code>required</code> 设置为 <code>false</code> 并且 <code>.env</code> 文件丢失时，Compose 会默默地忽略该条目。</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#E53935;">env_file</span><span style="color:#39ADB5;">:</span></span>
<span class="line"><span style="color:#39ADB5;">  -</span><span style="color:#E53935;"> path</span><span style="color:#39ADB5;">:</span><span style="color:#91B859;"> ./default.env</span></span>
<span class="line"><span style="color:#E53935;">    required</span><span style="color:#39ADB5;">:</span><span style="color:#FF5370;"> true</span><span style="color:#90A4AE;font-style:italic;"> # default</span></span>
<span class="line"><span style="color:#39ADB5;">  -</span><span style="color:#E53935;"> path</span><span style="color:#39ADB5;">:</span><span style="color:#91B859;"> ./override.env</span></span>
<span class="line"><span style="color:#E53935;">    required</span><span style="color:#39ADB5;">:</span><span style="color:#FF5370;"> false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如果您在 <code>.env</code> 文件中定义环境变量，则可以使用 <code>environment</code> 属性直接在 <code>compose.yml</code> 中引用它。例如，如果您的 <code>.env</code> 文件包含环境变量 <code>DEBUG=1</code> 并且您的 <code>compose.yml</code> 文件如下所示</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#E2931D;">  services:</span></span>
<span class="line"><span style="color:#E2931D;">    webapp:</span></span>
<span class="line"><span style="color:#E2931D;">      image:</span><span style="color:#91B859;"> my-webapp-image</span></span>
<span class="line"><span style="color:#E2931D;">      environment:</span></span>
<span class="line"><span style="color:#E2931D;">        -</span><span style="color:#91B859;"> DEBUG=</span><span style="color:#39ADB5;">\${</span><span style="color:#90A4AE;">DEBUG</span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;"># Docker Compose 将 \${DEBUG} 替换为 .env 文件中的值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>可以在带有 <code>env_file</code> 属性的 <code>compose.yml</code> 中使用多个 <code>.env</code> 文件，Docker Compose 将按照指定的顺序读取它们。如果在多个文件中定义相同的变量，则最后一个定义优先：</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#E53935;">services</span><span style="color:#39ADB5;">:</span></span>
<span class="line"><span style="color:#E53935;">  webapp</span><span style="color:#39ADB5;">:</span></span>
<span class="line"><span style="color:#E53935;">    image</span><span style="color:#39ADB5;">:</span><span style="color:#91B859;"> my-webapp-image</span></span>
<span class="line"><span style="color:#E53935;">    env_file</span><span style="color:#39ADB5;">:</span></span>
<span class="line"><span style="color:#39ADB5;">      -</span><span style="color:#91B859;"> .env</span></span>
<span class="line"><span style="color:#39ADB5;">      -</span><span style="color:#91B859;"> .env.override</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>可以将 <code>.env</code> 文件放置在项目目录根目录以外的位置，然后使用以下方法之一，以便 Compose 可以导航到该文件：</p><ol><li>docker compose --env-file</li><li>在 Compose 文件中使用 <code>env_file</code> 属性</li></ol><h3 id="使用environment-属性" tabindex="-1">使用environment 属性 <a class="header-anchor" href="#使用environment-属性" aria-label="Permalink to &quot;使用environment 属性&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#E2931D;">web:</span></span>
<span class="line"><span style="color:#E2931D;">  environment:</span></span>
<span class="line"><span style="color:#E2931D;">    -</span><span style="color:#91B859;"> DEBUG=</span><span style="color:#F76D47;">1</span></span>
<span class="line"><span style="color:#90A4AE;">    </span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;"># 数组</span></span>
<span class="line"><span style="color:#E2931D;">environment:</span></span>
<span class="line"><span style="color:#E2931D;">  -</span><span style="color:#91B859;"> RACK_ENV=development</span></span>
<span class="line"><span style="color:#E2931D;">  -</span><span style="color:#91B859;"> SHOW=</span><span style="color:#39ADB5;">true</span></span>
<span class="line"><span style="color:#E2931D;">  -</span><span style="color:#91B859;"> USER_INPUT</span></span>
<span class="line"><span style="color:#90A4AE;">  </span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;"># 字典</span></span>
<span class="line"><span style="color:#E2931D;">environment:</span></span>
<span class="line"><span style="color:#E2931D;">  RACK_ENV:</span><span style="color:#91B859;"> development</span></span>
<span class="line"><span style="color:#E2931D;">  SHOW:</span><span style="color:#39ADB5;"> &quot;</span><span style="color:#91B859;">true</span><span style="color:#39ADB5;">&quot;</span></span>
<span class="line"><span style="color:#E2931D;">  USER_INPUT:</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="使用env-file属性" tabindex="-1">使用env_file属性 <a class="header-anchor" href="#使用env-file属性" aria-label="Permalink to &quot;使用env_file属性&quot;">​</a></h3><p><code>env_file</code> 属性允许您在 Compose 应用程序中使用多个 <code>.env</code> 文件。它还可以帮助您将环境变量与主配置文件分开，从而提供更有条理、更安全的方式来管理敏感信息，因为您不需要将 <code>.env</code> 文件放在项目目录的根目录中。</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#E53935;">web</span><span style="color:#39ADB5;">:</span></span>
<span class="line"><span style="color:#E53935;">  env_file</span><span style="color:#39ADB5;">:</span></span>
<span class="line"><span style="color:#39ADB5;">    -</span><span style="color:#91B859;"> web-variables.env</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#90A4AE;font-style:italic;"># 多个文件</span></span>
<span class="line"><span style="color:#E2931D;">docker</span><span style="color:#91B859;"> compose</span><span style="color:#91B859;"> -f</span><span style="color:#91B859;"> compose.yml</span><span style="color:#91B859;"> -f</span><span style="color:#91B859;"> production.yml</span><span style="color:#91B859;"> up</span><span style="color:#91B859;"> -d</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="expose" tabindex="-1">expose <a class="header-anchor" href="#expose" aria-label="Permalink to &quot;expose&quot;">​</a></h2><p><code>expose</code> 定义 Compose 从容器公开的（传入）端口或一系列端口。这些端口必须可供链接服务访问，并且不应发布到主机。只能指定内部容器端口。</p><p><strong>如果镜像的 Dockerfile 已公开端口，则即使您的 Compose 文件中未设置 <code>expose</code> ，网络上的其他容器也可以看到该端口。</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="color:#E2931D;">expose:</span></span>
<span class="line"><span style="color:#E2931D;">  -</span><span style="color:#39ADB5;"> &quot;</span><span style="color:#91B859;">3000</span><span style="color:#39ADB5;">&quot;</span></span>
<span class="line"><span style="color:#E2931D;">  -</span><span style="color:#39ADB5;"> &quot;</span><span style="color:#91B859;">8000</span><span style="color:#39ADB5;">&quot;</span></span>
<span class="line"><span style="color:#E2931D;">  -</span><span style="color:#39ADB5;"> &quot;</span><span style="color:#91B859;">8080-8085/tcp</span><span style="color:#39ADB5;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h1 id="volumes" tabindex="-1">Volumes <a class="header-anchor" href="#volumes" aria-label="Permalink to &quot;Volumes&quot;">​</a></h1><p>卷是由容器引擎实现的持久数据存储。 Compose 为服务提供了一种中立的方式来挂载卷，并提供配置参数来将卷分配给基础设施。</p>`,42),o=[p];function c(r,t,i,d,m,b){return a(),n("div",null,o)}const h=s(l,[["render",c]]);export{u as __pageData,h as default};

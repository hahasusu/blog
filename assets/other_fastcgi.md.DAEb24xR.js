import{_ as e,c as t,o as a,a4 as o}from"./chunks/framework.GYzjcnJh.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{"date":"2024-03-05 15:44:33"},"headers":[],"relativePath":"other/fastcgi.md","filePath":"other/fastcgi.md"}'),r={name:"other/fastcgi.md"},i=o('<h2 id="cgi" tabindex="-1">CGI <a class="header-anchor" href="#cgi" aria-label="Permalink to &quot;CGI&quot;">​</a></h2><p>在网站的整体架构中，Web Server（如nginx，apache）只是内容的分发者，对客户端的请求进行应答。</p><ul><li><p>如果客户端请求的是index.html这类静态页面，那么Web Server就去文件系统中找对应的文件，找到返回给客户端（一般是浏览器），在这里Web Server分发的就是是静态数据</p></li><li><p>对于像index.php这类的动态页面请求，Web Server根据配置文件知道这个不是静态文件，则会调用PHP 解析器进行处理然后将返回的数据转发给客户端（浏览器）</p></li></ul><blockquote><ol><li><p>CGI（Common Gateway Interface）全称是“通用网关接口”，是一种让客户端（web浏览器）与Web服务器（nginx等）程序进行通信（数据传输）的<strong>协议</strong>。</p></li><li><p>一般说的CGI指的是用各种语言编写的能实现该功能的程序。</p></li><li><p>可以用任何一种具有标准输入、输出和环境变量的语言编写</p></li></ol></blockquote><h3 id="工作原理" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理" aria-label="Permalink to &quot;工作原理&quot;">​</a></h3><ol><li>每次当web server收到index.php这种类型的动态请求后，会启动对应的CGI程序（PHP的解析器）；</li><li>PHP解析器会解析php.ini配置文件，初始化运行环境，然后处理请求，处理完成后将数据按照CGI规定的格式返回给web server然后退出进程；</li><li>最后web server再把结果返回给浏览器。</li></ol><h2 id="fastcgi" tabindex="-1">FastCGI <a class="header-anchor" href="#fastcgi" aria-label="Permalink to &quot;FastCGI&quot;">​</a></h2><blockquote><p>快速通用网关接口（Fast Common Gateway Interface／FastCGI）是通用网关接口（CGI）的改进，描述了客户端和服务器程序之间传输数据的一种标准。FastCGI致力于减少Web服务器与CGI程式之间互动的开销，从而使服务器可以同时处理更多的Web请求。与为每个请求创建一个新的进程不同，FastCGI使用持续的进程来处理一连串的请求。这些进程由FastCGI进程管理器管理，而不是web服务器。  FastCGI是从CGI发展改进而来的。传统CGI接口方式的主要缺点是性能很差，因为每次HTTP服务器遇到动态程序时都需要重新启动脚本解析器来执行解析，然后结果被返回给HTTP服务器。这在处理高并发访问时，几乎是不可用的。另外传统的CGI接口方式安全性也很差，现在已经很少被使用了</p></blockquote><blockquote><p>FastCGI接口方式采用C/S结构，可以将HTTP服务器和脚本解析服务器分开，同时在脚本解析服务器上启动一个或者多个脚本解析守护进程。当HTTP服务器每次遇到动态程序时，可以将其直接交付给FastCGI进程来执行，然后将得到的结果返回给浏览器。这种方式可以让HTTP服务器专一地处理静态请求或者将动态脚本服务器的结果返回给客户端，这在很大程度上提高了整个应用系统的性能。</p></blockquote><blockquote><p>Nginx不支持对外部程序的直接调用或者解析，所有的外部程序（包括PHP）必须通过FastCGI接口来调用。FastCGI接口在Linux下是socket，（这个socket可以是文件socket，也可以是ip socket）。为了调用CGI程序，还需要一个FastCGI的wrapper（wrapper可以理解为用于启动另一个程序的程序），这个wrapper绑定在某个固定socket上，如端口或者文件socket。当Nginx将CGI请求发送给这个socket的时候，通过FastCGI接口，wrapper接纳到请求，然后派生出一个新的线程，这个线程调用解释器或者外部程序处理脚本并读取返回数据；接着，wrapper再将返回的数据通过FastCGI接口，沿着固定的socket传递给Nginx；最后，Nginx将返回的数据发送给客户端，这就是Nginx+FastCGI的整个运作过程。</p></blockquote>',10),s=[i];function c(l,n,p,C,I,G){return a(),t("div",null,s)}const b=e(r,[["render",c]]);export{_ as __pageData,b as default};
